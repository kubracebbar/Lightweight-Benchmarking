
stm32f303vc_nist_lwc_becnchmark.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  08003b48  08003b48  00013b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ea0  08003ea0  000200f0  2**0
                  CONTENTS
  4 .ARM          00000000  08003ea0  08003ea0  000200f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ea0  08003ea0  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ea0  08003ea0  00013ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ea4  08003ea4  00013ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  08003ea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  200000f0  08003f98  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08003f98  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3f2  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002444  00000000  00000000  0002d512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  0002f958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a90  00000000  00000000  000304d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020b89  00000000  00000000  00030f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bbc6  00000000  00000000  00051ae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bec03  00000000  00000000  0005d6af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011c2b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003878  00000000  00000000  0011c308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f0 	.word	0x200000f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003b30 	.word	0x08003b30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f4 	.word	0x200000f4
 80001cc:	08003b30 	.word	0x08003b30

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	f043 0201 	orr.w	r2, r3, #1
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	601a      	str	r2, [r3, #0]
}
 8000294:	bf00      	nop
 8000296:	370c      	adds	r7, #12
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr

080002a0 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	f023 0201 	bic.w	r2, r3, #1
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	601a      	str	r2, [r3, #0]
}
 80002b4:	bf00      	nop
 80002b6:	370c      	adds	r7, #12
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	683a      	ldr	r2, [r7, #0]
 80002ce:	625a      	str	r2, [r3, #36]	; 0x24
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr

080002dc <LL_TIM_GetCounter>:
  * @rmtoll CNT          CNT           LL_TIM_GetCounter
  * @param  TIMx Timer instance
  * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  */
__STATIC_INLINE uint32_t LL_TIM_GetCounter(TIM_TypeDef *TIMx)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr

080002f4 <genkat_aead_funct>:




int genkat_aead_funct(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
#ifdef LWC_ALGO_AEAD
	int ret = aead_generate_test_vectors();
#endif

#ifdef LWC_ALGO_HASH
	int ret = hash_generate_test_vectors();
 80002fa:	f000 f807 	bl	800030c <hash_generate_test_vectors>
 80002fe:	6078      	str	r0, [r7, #4]
#endif

	return ret;
 8000300:	687b      	ldr	r3, [r7, #4]
}
 8000302:	4618      	mov	r0, r3
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
	...

0800030c <hash_generate_test_vectors>:
#ifdef LWC_ALGO_HASH

#define MAX_MESSAGE_LENGTH			1024


int hash_generate_test_vectors(){
 800030c:	b5b0      	push	{r4, r5, r7, lr}
 800030e:	f5ad 6d86 	sub.w	sp, sp, #1072	; 0x430
 8000312:	af00      	add	r7, sp, #0


	unsigned char       msg[MAX_MESSAGE_LENGTH];
	unsigned char		digest[CRYPTO_BYTES];
	int                 ret_val = KAT_SUCCESS;
 8000314:	2300      	movs	r3, #0
 8000316:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c

	init_buffer(msg, sizeof(msg));
 800031a:	f107 0120 	add.w	r1, r7, #32
 800031e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000322:	f04f 0300 	mov.w	r3, #0
 8000326:	4608      	mov	r0, r1
 8000328:	f000 f862 	bl	80003f0 <init_buffer>

	lwc_printf("\n\n\n\nStarting...\nOptimization: %s\nAlgorithm: %s\n", OPTIMIZATION_LEVEL, algo_name_str );
 800032c:	4a2a      	ldr	r2, [pc, #168]	; (80003d8 <hash_generate_test_vectors+0xcc>)
 800032e:	492b      	ldr	r1, [pc, #172]	; (80003dc <hash_generate_test_vectors+0xd0>)
 8000330:	482b      	ldr	r0, [pc, #172]	; (80003e0 <hash_generate_test_vectors+0xd4>)
 8000332:	f000 f8a7 	bl	8000484 <lwc_printf>

	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen += 256) {
 8000336:	f04f 0200 	mov.w	r2, #0
 800033a:	f04f 0300 	mov.w	r3, #0
 800033e:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8000342:	e9c1 2300 	strd	r2, r3, [r1]
 8000346:	e033      	b.n	80003b0 <hash_generate_test_vectors+0xa4>


		lwc_printf("msg_len:%04d ", (int)mlen);
 8000348:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800034c:	4619      	mov	r1, r3
 800034e:	4825      	ldr	r0, [pc, #148]	; (80003e4 <hash_generate_test_vectors+0xd8>)
 8000350:	f000 f898 	bl	8000484 <lwc_printf>

		tick_msr_start();
 8000354:	f000 f875 	bl	8000442 <tick_msr_start>
		ret_val = crypto_hash(digest, msg, mlen);
 8000358:	f107 0120 	add.w	r1, r7, #32
 800035c:	4638      	mov	r0, r7
 800035e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8000362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000366:	f001 f966 	bl	8001636 <crypto_hash>
 800036a:	f8c7 042c 	str.w	r0, [r7, #1068]	; 0x42c
		tick_msr_end();
 800036e:	f000 f879 	bl	8000464 <tick_msr_end>

		if(ret_val == 0) {
 8000372:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8000376:	2b00      	cmp	r3, #0
 8000378:	d109      	bne.n	800038e <hash_generate_test_vectors+0x82>
			lwc_printf( "hash:%08lu us:%08lu \n", gb_tick_cnt, gb_tick_cnt/16);
 800037a:	4b1b      	ldr	r3, [pc, #108]	; (80003e8 <hash_generate_test_vectors+0xdc>)
 800037c:	6819      	ldr	r1, [r3, #0]
 800037e:	4b1a      	ldr	r3, [pc, #104]	; (80003e8 <hash_generate_test_vectors+0xdc>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	091b      	lsrs	r3, r3, #4
 8000384:	461a      	mov	r2, r3
 8000386:	4819      	ldr	r0, [pc, #100]	; (80003ec <hash_generate_test_vectors+0xe0>)
 8000388:	f000 f87c 	bl	8000484 <lwc_printf>
 800038c:	e004      	b.n	8000398 <hash_generate_test_vectors+0x8c>
		}else{
			ret_val = KAT_CRYPTO_FAILURE;
 800038e:	f06f 0303 	mvn.w	r3, #3
 8000392:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
			break;
 8000396:	e017      	b.n	80003c8 <hash_generate_test_vectors+0xbc>
	for (unsigned long long mlen = 0; mlen <= MAX_MESSAGE_LENGTH; mlen += 256) {
 8000398:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800039c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003a0:	f512 7480 	adds.w	r4, r2, #256	; 0x100
 80003a4:	f143 0500 	adc.w	r5, r3, #0
 80003a8:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80003ac:	e9c3 4500 	strd	r4, r5, [r3]
 80003b0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80003b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80003bc:	f04f 0100 	mov.w	r1, #0
 80003c0:	4299      	cmp	r1, r3
 80003c2:	bf08      	it	eq
 80003c4:	4290      	cmpeq	r0, r2
 80003c6:	d2bf      	bcs.n	8000348 <hash_generate_test_vectors+0x3c>
		}
	}

	return ret_val;
 80003c8:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	f507 6786 	add.w	r7, r7, #1072	; 0x430
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bdb0      	pop	{r4, r5, r7, pc}
 80003d6:	bf00      	nop
 80003d8:	20000000 	.word	0x20000000
 80003dc:	08003b48 	.word	0x08003b48
 80003e0:	08003b4c 	.word	0x08003b4c
 80003e4:	08003b7c 	.word	0x08003b7c
 80003e8:	2000010c 	.word	0x2000010c
 80003ec:	08003b8c 	.word	0x08003b8c

080003f0 <init_buffer>:




void init_buffer(unsigned char *buffer, unsigned long long numbytes)
{
 80003f0:	b4b0      	push	{r4, r5, r7}
 80003f2:	b087      	sub	sp, #28
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	60f8      	str	r0, [r7, #12]
 80003f8:	e9c7 2300 	strd	r2, r3, [r7]
	for (unsigned long long i = 0; i < numbytes; i++)
 80003fc:	f04f 0200 	mov.w	r2, #0
 8000400:	f04f 0300 	mov.w	r3, #0
 8000404:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000408:	e00d      	b.n	8000426 <init_buffer+0x36>
		buffer[i] = (unsigned char)i + '0';
 800040a:	7c3a      	ldrb	r2, [r7, #16]
 800040c:	693b      	ldr	r3, [r7, #16]
 800040e:	68f9      	ldr	r1, [r7, #12]
 8000410:	440b      	add	r3, r1
 8000412:	3230      	adds	r2, #48	; 0x30
 8000414:	b2d2      	uxtb	r2, r2
 8000416:	701a      	strb	r2, [r3, #0]
	for (unsigned long long i = 0; i < numbytes; i++)
 8000418:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800041c:	1c54      	adds	r4, r2, #1
 800041e:	f143 0500 	adc.w	r5, r3, #0
 8000422:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8000426:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800042a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800042e:	4299      	cmp	r1, r3
 8000430:	bf08      	it	eq
 8000432:	4290      	cmpeq	r0, r2
 8000434:	d3e9      	bcc.n	800040a <init_buffer+0x1a>
}
 8000436:	bf00      	nop
 8000438:	bf00      	nop
 800043a:	371c      	adds	r7, #28
 800043c:	46bd      	mov	sp, r7
 800043e:	bcb0      	pop	{r4, r5, r7}
 8000440:	4770      	bx	lr

08000442 <tick_msr_start>:



void tick_msr_start(void){
 8000442:	b580      	push	{r7, lr}
 8000444:	af00      	add	r7, sp, #0

	LL_TIM_DisableCounter(TIM2);
 8000446:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800044a:	f7ff ff29 	bl	80002a0 <LL_TIM_DisableCounter>
	LL_TIM_SetCounter(TIM2, 0);
 800044e:	2100      	movs	r1, #0
 8000450:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000454:	f7ff ff34 	bl	80002c0 <LL_TIM_SetCounter>
	LL_TIM_EnableCounter(TIM2);
 8000458:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800045c:	f7ff ff10 	bl	8000280 <LL_TIM_EnableCounter>

}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}

08000464 <tick_msr_end>:

uint32_t tick_msr_end(void){
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0

	gb_tick_cnt = LL_TIM_GetCounter(TIM2);
 8000468:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800046c:	f7ff ff36 	bl	80002dc <LL_TIM_GetCounter>
 8000470:	4603      	mov	r3, r0
 8000472:	4a03      	ldr	r2, [pc, #12]	; (8000480 <tick_msr_end+0x1c>)
 8000474:	6013      	str	r3, [r2, #0]
	return gb_tick_cnt;
 8000476:	4b02      	ldr	r3, [pc, #8]	; (8000480 <tick_msr_end+0x1c>)
 8000478:	681b      	ldr	r3, [r3, #0]
}
 800047a:	4618      	mov	r0, r3
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	2000010c 	.word	0x2000010c

08000484 <lwc_printf>:

void lwc_printf(const char* format, ...){
 8000484:	b40f      	push	{r0, r1, r2, r3}
 8000486:	b580      	push	{r7, lr}
 8000488:	b082      	sub	sp, #8
 800048a:	af00      	add	r7, sp, #0

	static char dbg_out_buf[512];
	va_list args;

	va_start(args,format);
 800048c:	f107 0314 	add.w	r3, r7, #20
 8000490:	607b      	str	r3, [r7, #4]
	vsprintf (dbg_out_buf, format, args );
 8000492:	687a      	ldr	r2, [r7, #4]
 8000494:	6939      	ldr	r1, [r7, #16]
 8000496:	480a      	ldr	r0, [pc, #40]	; (80004c0 <lwc_printf+0x3c>)
 8000498:	f002 fd00 	bl	8002e9c <vsiprintf>
	va_end(args);

	HAL_UART_Transmit(&huart1, (uint8_t *)dbg_out_buf, strlen(dbg_out_buf), 100);
 800049c:	4808      	ldr	r0, [pc, #32]	; (80004c0 <lwc_printf+0x3c>)
 800049e:	f7ff fe97 	bl	80001d0 <strlen>
 80004a2:	4603      	mov	r3, r0
 80004a4:	b29a      	uxth	r2, r3
 80004a6:	2364      	movs	r3, #100	; 0x64
 80004a8:	4905      	ldr	r1, [pc, #20]	; (80004c0 <lwc_printf+0x3c>)
 80004aa:	4806      	ldr	r0, [pc, #24]	; (80004c4 <lwc_printf+0x40>)
 80004ac:	f001 fcb8 	bl	8001e20 <HAL_UART_Transmit>
}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80004ba:	b004      	add	sp, #16
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	20000110 	.word	0x20000110
 80004c4:	20000330 	.word	0x20000330

080004c8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80004cc:	4b05      	ldr	r3, [pc, #20]	; (80004e4 <LL_RCC_HSI_Enable+0x1c>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a04      	ldr	r2, [pc, #16]	; (80004e4 <LL_RCC_HSI_Enable+0x1c>)
 80004d2:	f043 0301 	orr.w	r3, r3, #1
 80004d6:	6013      	str	r3, [r2, #0]
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	40021000 	.word	0x40021000

080004e8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <LL_RCC_HSI_IsReady+0x20>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f003 0302 	and.w	r3, r3, #2
 80004f4:	2b02      	cmp	r3, #2
 80004f6:	bf0c      	ite	eq
 80004f8:	2301      	moveq	r3, #1
 80004fa:	2300      	movne	r3, #0
 80004fc:	b2db      	uxtb	r3, r3
}
 80004fe:	4618      	mov	r0, r3
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	40021000 	.word	0x40021000

0800050c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000514:	4b07      	ldr	r3, [pc, #28]	; (8000534 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	00db      	lsls	r3, r3, #3
 8000520:	4904      	ldr	r1, [pc, #16]	; (8000534 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000522:	4313      	orrs	r3, r2
 8000524:	600b      	str	r3, [r1, #0]
}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	40021000 	.word	0x40021000

08000538 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000540:	4b06      	ldr	r3, [pc, #24]	; (800055c <LL_RCC_SetSysClkSource+0x24>)
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	f023 0203 	bic.w	r2, r3, #3
 8000548:	4904      	ldr	r1, [pc, #16]	; (800055c <LL_RCC_SetSysClkSource+0x24>)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4313      	orrs	r3, r2
 800054e:	604b      	str	r3, [r1, #4]
}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	40021000 	.word	0x40021000

08000560 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000564:	4b04      	ldr	r3, [pc, #16]	; (8000578 <LL_RCC_GetSysClkSource+0x18>)
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	f003 030c 	and.w	r3, r3, #12
}
 800056c:	4618      	mov	r0, r3
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	40021000 	.word	0x40021000

0800057c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000584:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <LL_RCC_SetAHBPrescaler+0x24>)
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800058c:	4904      	ldr	r1, [pc, #16]	; (80005a0 <LL_RCC_SetAHBPrescaler+0x24>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4313      	orrs	r3, r2
 8000592:	604b      	str	r3, [r1, #4]
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	40021000 	.word	0x40021000

080005a4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80005b4:	4904      	ldr	r1, [pc, #16]	; (80005c8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4313      	orrs	r3, r2
 80005ba:	604b      	str	r3, [r1, #4]
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	40021000 	.word	0x40021000

080005cc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80005dc:	4904      	ldr	r1, [pc, #16]	; (80005f0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4313      	orrs	r3, r2
 80005e2:	604b      	str	r3, [r1, #4]
}
 80005e4:	bf00      	nop
 80005e6:	370c      	adds	r7, #12
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	40021000 	.word	0x40021000

080005f4 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 80005fc:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <LL_RCC_SetUSARTClockSource+0x34>)
 80005fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	0e1b      	lsrs	r3, r3, #24
 8000604:	2103      	movs	r1, #3
 8000606:	fa01 f303 	lsl.w	r3, r1, r3
 800060a:	43db      	mvns	r3, r3
 800060c:	401a      	ands	r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000614:	4904      	ldr	r1, [pc, #16]	; (8000628 <LL_RCC_SetUSARTClockSource+0x34>)
 8000616:	4313      	orrs	r3, r2
 8000618:	630b      	str	r3, [r1, #48]	; 0x30
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40021000 	.word	0x40021000

0800062c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <LL_RCC_PLL_Enable+0x1c>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <LL_RCC_PLL_Enable+0x1c>)
 8000636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800063a:	6013      	str	r3, [r2, #0]
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	40021000 	.word	0x40021000

0800064c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <LL_RCC_PLL_IsReady+0x24>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000658:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800065c:	bf0c      	ite	eq
 800065e:	2301      	moveq	r3, #1
 8000660:	2300      	movne	r3, #0
 8000662:	b2db      	uxtb	r3, r3
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40021000 	.word	0x40021000

08000674 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 800067e:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	430b      	orrs	r3, r1
 8000690:	4909      	ldr	r1, [pc, #36]	; (80006b8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000692:	4313      	orrs	r3, r2
 8000694:	604b      	str	r3, [r1, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8000696:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800069a:	f023 020f 	bic.w	r2, r3, #15
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f003 030f 	and.w	r3, r3, #15
 80006a4:	4904      	ldr	r1, [pc, #16]	; (80006b8 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80006a6:	4313      	orrs	r3, r2
 80006a8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	40021000 	.word	0x40021000

080006bc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006c6:	695a      	ldr	r2, [r3, #20]
 80006c8:	4907      	ldr	r1, [pc, #28]	; (80006e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4313      	orrs	r3, r2
 80006ce:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006d2:	695a      	ldr	r2, [r3, #20]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4013      	ands	r3, r2
 80006d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006da:	68fb      	ldr	r3, [r7, #12]
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	40021000 	.word	0x40021000

080006ec <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <LL_APB1_GRP1_EnableClock+0x2c>)
 80006f6:	69da      	ldr	r2, [r3, #28]
 80006f8:	4907      	ldr	r1, [pc, #28]	; (8000718 <LL_APB1_GRP1_EnableClock+0x2c>)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000702:	69da      	ldr	r2, [r3, #28]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4013      	ands	r3, r2
 8000708:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800070a:	68fb      	ldr	r3, [r7, #12]
}
 800070c:	bf00      	nop
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	40021000 	.word	0x40021000

0800071c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <LL_FLASH_SetLatency+0x24>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f023 0207 	bic.w	r2, r3, #7
 800072c:	4904      	ldr	r1, [pc, #16]	; (8000740 <LL_FLASH_SetLatency+0x24>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4313      	orrs	r3, r2
 8000732:	600b      	str	r3, [r1, #0]
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	40022000 	.word	0x40022000

08000744 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000748:	4b04      	ldr	r3, [pc, #16]	; (800075c <LL_FLASH_GetLatency+0x18>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f003 0307 	and.w	r3, r3, #7
}
 8000750:	4618      	mov	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40022000 	.word	0x40022000

08000760 <LL_TIM_EnableCounter>:
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f043 0201 	orr.w	r2, r3, #1
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	601a      	str	r2, [r3, #0]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <LL_TIM_DisableCounter>:
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f023 0201 	bic.w	r2, r3, #1
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	601a      	str	r2, [r3, #0]
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr

080007a0 <LL_TIM_DisableARRPreload>:
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	601a      	str	r2, [r3, #0]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <LL_TIM_SetCounter>:
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	683a      	ldr	r2, [r7, #0]
 80007ce:	625a      	str	r2, [r3, #36]	; 0x24
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <LL_TIM_GetCounter>:
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	689b      	ldr	r3, [r3, #8]
 8000802:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000806:	f023 0307 	bic.w	r3, r3, #7
 800080a:	683a      	ldr	r2, [r7, #0]
 800080c:	431a      	orrs	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	609a      	str	r2, [r3, #8]
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800081e:	b480      	push	{r7}
 8000820:	b083      	sub	sp, #12
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
 8000826:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	431a      	orrs	r2, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	605a      	str	r2, [r3, #4]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	609a      	str	r2, [r3, #8]
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086a:	f000 ff0b 	bl	8001684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800086e:	f000 f83f 	bl	80008f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000872:	f000 f8e7 	bl	8000a44 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000876:	f000 f883 	bl	8000980 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800087a:	f000 f8b3 	bl	80009e4 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  LL_TIM_SetCounter(TIM2, 0);
 800087e:	2100      	movs	r1, #0
 8000880:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000884:	f7ff ff9c 	bl	80007c0 <LL_TIM_SetCounter>
	  LL_TIM_EnableCounter(TIM2);
 8000888:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800088c:	f7ff ff68 	bl	8000760 <LL_TIM_EnableCounter>

	  /* Algorithm starts */
	  int res = genkat_aead_funct();
 8000890:	f7ff fd30 	bl	80002f4 <genkat_aead_funct>
 8000894:	6078      	str	r0, [r7, #4]

	  if(res != 0 ){
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d002      	beq.n	80008a2 <main+0x3e>
		  LL_mDelay(100000000);
 800089c:	4810      	ldr	r0, [pc, #64]	; (80008e0 <main+0x7c>)
 800089e:	f001 ff53 	bl	8002748 <LL_mDelay>
	  }
	  /* Algorithm ends */

	  LL_TIM_DisableCounter(TIM2);
 80008a2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80008a6:	f7ff ff6b 	bl	8000780 <LL_TIM_DisableCounter>
	  tim_ticks[tim_ticks_pos] = LL_TIM_GetCounter(TIM2);
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <main+0x80>)
 80008ac:	681c      	ldr	r4, [r3, #0]
 80008ae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80008b2:	f7ff ff93 	bl	80007dc <LL_TIM_GetCounter>
 80008b6:	4603      	mov	r3, r0
 80008b8:	4a0b      	ldr	r2, [pc, #44]	; (80008e8 <main+0x84>)
 80008ba:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

	  tim_ticks_pos++;
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <main+0x80>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3301      	adds	r3, #1
 80008c4:	4a07      	ldr	r2, [pc, #28]	; (80008e4 <main+0x80>)
 80008c6:	6013      	str	r3, [r2, #0]
	  if(tim_ticks_pos >= sizeof(tim_ticks)/sizeof(tim_ticks[0]) ){
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <main+0x80>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b03      	cmp	r3, #3
 80008ce:	d902      	bls.n	80008d6 <main+0x72>
		  tim_ticks_pos = 0;
 80008d0:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <main+0x80>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
	  }

	  LL_mDelay(1000000);
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <main+0x88>)
 80008d8:	f001 ff36 	bl	8002748 <LL_mDelay>
  {
 80008dc:	e7cf      	b.n	800087e <main+0x1a>
 80008de:	bf00      	nop
 80008e0:	05f5e100 	.word	0x05f5e100
 80008e4:	20000310 	.word	0x20000310
 80008e8:	20000320 	.word	0x20000320
 80008ec:	000f4240 	.word	0x000f4240

080008f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80008f4:	2000      	movs	r0, #0
 80008f6:	f7ff ff11 	bl	800071c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80008fa:	bf00      	nop
 80008fc:	f7ff ff22 	bl	8000744 <LL_FLASH_GetLatency>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d1fa      	bne.n	80008fc <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8000906:	f7ff fddf 	bl	80004c8 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800090a:	bf00      	nop
 800090c:	f7ff fdec 	bl	80004e8 <LL_RCC_HSI_IsReady>
 8000910:	4603      	mov	r3, r0
 8000912:	2b01      	cmp	r3, #1
 8000914:	d1fa      	bne.n	800090c <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000916:	2010      	movs	r0, #16
 8000918:	f7ff fdf8 	bl	800050c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_4);
 800091c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8000920:	2000      	movs	r0, #0
 8000922:	f7ff fea7 	bl	8000674 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000926:	f7ff fe81 	bl	800062c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800092a:	bf00      	nop
 800092c:	f7ff fe8e 	bl	800064c <LL_RCC_PLL_IsReady>
 8000930:	4603      	mov	r3, r0
 8000932:	2b01      	cmp	r3, #1
 8000934:	d1fa      	bne.n	800092c <SystemClock_Config+0x3c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000936:	2000      	movs	r0, #0
 8000938:	f7ff fe20 	bl	800057c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 800093c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000940:	f7ff fe30 	bl	80005a4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8000944:	2000      	movs	r0, #0
 8000946:	f7ff fe41 	bl	80005cc <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800094a:	2002      	movs	r0, #2
 800094c:	f7ff fdf4 	bl	8000538 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000950:	bf00      	nop
 8000952:	f7ff fe05 	bl	8000560 <LL_RCC_GetSysClkSource>
 8000956:	4603      	mov	r3, r0
 8000958:	2b08      	cmp	r3, #8
 800095a:	d1fa      	bne.n	8000952 <SystemClock_Config+0x62>
  {

  }
  LL_SetSystemCoreClock(16000000);
 800095c:	4807      	ldr	r0, [pc, #28]	; (800097c <SystemClock_Config+0x8c>)
 800095e:	f001 ff19 	bl	8002794 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000962:	2000      	movs	r0, #0
 8000964:	f000 fea4 	bl	80016b0 <HAL_InitTick>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800096e:	f000 f875 	bl	8000a5c <Error_Handler>
  }
  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 8000972:	2000      	movs	r0, #0
 8000974:	f7ff fe3e 	bl	80005f4 <LL_RCC_SetUSARTClockSource>
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	00f42400 	.word	0x00f42400

08000980 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000994:	2001      	movs	r0, #1
 8000996:	f7ff fea9 	bl	80006ec <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 4294967295;
 80009a2:	f04f 33ff 	mov.w	r3, #4294967295
 80009a6:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	4619      	mov	r1, r3
 80009b0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80009b4:	f001 fe3e 	bl	8002634 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 80009b8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80009bc:	f7ff fef0 	bl	80007a0 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80009c0:	2100      	movs	r1, #0
 80009c2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80009c6:	f7ff ff15 	bl	80007f4 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80009ca:	2100      	movs	r1, #0
 80009cc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80009d0:	f7ff ff25 	bl	800081e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80009d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80009d8:	f7ff ff34 	bl	8000844 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_USART1_UART_Init+0x58>)
 80009ea:	4a15      	ldr	r2, [pc, #84]	; (8000a40 <MX_USART1_UART_Init+0x5c>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ee:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <MX_USART1_UART_Init+0x58>)
 80009f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_USART1_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_USART1_UART_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_USART1_UART_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_USART1_UART_Init+0x58>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <MX_USART1_UART_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_USART1_UART_Init+0x58>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <MX_USART1_UART_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_USART1_UART_Init+0x58>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_USART1_UART_Init+0x58>)
 8000a28:	f001 f9ac 	bl	8001d84 <HAL_UART_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a32:	f000 f813 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000330 	.word	0x20000330
 8000a40:	40013800 	.word	0x40013800

08000a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000a48:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000a4c:	f7ff fe36 	bl	80006bc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000a50:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a54:	f7ff fe32 	bl	80006bc <LL_AHB1_GRP1_EnableClock>

}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a60:	b672      	cpsid	i
}
 8000a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <Error_Handler+0x8>
	...

08000a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <HAL_MspInit+0x44>)
 8000a70:	699b      	ldr	r3, [r3, #24]
 8000a72:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <HAL_MspInit+0x44>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6193      	str	r3, [r2, #24]
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <HAL_MspInit+0x44>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <HAL_MspInit+0x44>)
 8000a88:	69db      	ldr	r3, [r3, #28]
 8000a8a:	4a08      	ldr	r2, [pc, #32]	; (8000aac <HAL_MspInit+0x44>)
 8000a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a90:	61d3      	str	r3, [r2, #28]
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_MspInit+0x44>)
 8000a94:	69db      	ldr	r3, [r3, #28]
 8000a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	40021000 	.word	0x40021000

08000ab0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a17      	ldr	r2, [pc, #92]	; (8000b2c <HAL_UART_MspInit+0x7c>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d127      	bne.n	8000b22 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <HAL_UART_MspInit+0x80>)
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	4a16      	ldr	r2, [pc, #88]	; (8000b30 <HAL_UART_MspInit+0x80>)
 8000ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000adc:	6193      	str	r3, [r2, #24]
 8000ade:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <HAL_UART_MspInit+0x80>)
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <HAL_UART_MspInit+0x80>)
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	4a10      	ldr	r2, [pc, #64]	; (8000b30 <HAL_UART_MspInit+0x80>)
 8000af0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000af4:	6153      	str	r3, [r2, #20]
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <HAL_UART_MspInit+0x80>)
 8000af8:	695b      	ldr	r3, [r3, #20]
 8000afa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b02:	2330      	movs	r3, #48	; 0x30
 8000b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b12:	2307      	movs	r3, #7
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <HAL_UART_MspInit+0x84>)
 8000b1e:	f000 fefd 	bl	800191c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b22:	bf00      	nop
 8000b24:	3728      	adds	r7, #40	; 0x28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40013800 	.word	0x40013800
 8000b30:	40021000 	.word	0x40021000
 8000b34:	48000800 	.word	0x48000800

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <NMI_Handler+0x4>

08000b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <HardFault_Handler+0x4>

08000b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <MemManage_Handler+0x4>

08000b4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <BusFault_Handler+0x4>

08000b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <UsageFault_Handler+0x4>

08000b56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b84:	f000 fdc4 	bl	8001710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
	return 1;
 8000b90:	2301      	movs	r3, #1
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <_kill>:

int _kill(int pid, int sig)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ba6:	f001 fe23 	bl	80027f0 <__errno>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2216      	movs	r2, #22
 8000bae:	601a      	str	r2, [r3, #0]
	return -1;
 8000bb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <_exit>:

void _exit (int status)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f7ff ffe7 	bl	8000b9c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000bce:	e7fe      	b.n	8000bce <_exit+0x12>

08000bd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	e00a      	b.n	8000bf8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000be2:	f3af 8000 	nop.w
 8000be6:	4601      	mov	r1, r0
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	1c5a      	adds	r2, r3, #1
 8000bec:	60ba      	str	r2, [r7, #8]
 8000bee:	b2ca      	uxtb	r2, r1
 8000bf0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	697a      	ldr	r2, [r7, #20]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	dbf0      	blt.n	8000be2 <_read+0x12>
	}

return len;
 8000c00:	687b      	ldr	r3, [r7, #4]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b086      	sub	sp, #24
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	60f8      	str	r0, [r7, #12]
 8000c12:	60b9      	str	r1, [r7, #8]
 8000c14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	e009      	b.n	8000c30 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	1c5a      	adds	r2, r3, #1
 8000c20:	60ba      	str	r2, [r7, #8]
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	697a      	ldr	r2, [r7, #20]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	dbf1      	blt.n	8000c1c <_write+0x12>
	}
	return len;
 8000c38:	687b      	ldr	r3, [r7, #4]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <_close>:

int _close(int file)
{
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
	return -1;
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c6a:	605a      	str	r2, [r3, #4]
	return 0;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <_isatty>:

int _isatty(int file)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
	return 1;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	607a      	str	r2, [r7, #4]
	return 0;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
	...

08000cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb4:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <_sbrk+0x5c>)
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <_sbrk+0x60>)
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc0:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d102      	bne.n	8000cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <_sbrk+0x64>)
 8000cca:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <_sbrk+0x68>)
 8000ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <_sbrk+0x64>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d207      	bcs.n	8000cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cdc:	f001 fd88 	bl	80027f0 <__errno>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	220c      	movs	r2, #12
 8000ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cea:	e009      	b.n	8000d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cec:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <_sbrk+0x64>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	4a05      	ldr	r2, [pc, #20]	; (8000d10 <_sbrk+0x64>)
 8000cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	2000a000 	.word	0x2000a000
 8000d0c:	00000400 	.word	0x00000400
 8000d10:	20000314 	.word	0x20000314
 8000d14:	200003c8 	.word	0x200003c8

08000d18 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <SystemInit+0x20>)
 8000d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <SystemInit+0x20>)
 8000d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d74 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d40:	480d      	ldr	r0, [pc, #52]	; (8000d78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d42:	490e      	ldr	r1, [pc, #56]	; (8000d7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d44:	4a0e      	ldr	r2, [pc, #56]	; (8000d80 <LoopForever+0xe>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d58:	4c0b      	ldr	r4, [pc, #44]	; (8000d88 <LoopForever+0x16>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d66:	f7ff ffd7 	bl	8000d18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d6a:	f001 fd59 	bl	8002820 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d6e:	f7ff fd79 	bl	8000864 <main>

08000d72 <LoopForever>:

LoopForever:
    b LoopForever
 8000d72:	e7fe      	b.n	8000d72 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d74:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d7c:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8000d80:	08003ea8 	.word	0x08003ea8
  ldr r2, =_sbss
 8000d84:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8000d88:	200003c8 	.word	0x200003c8

08000d8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d8c:	e7fe      	b.n	8000d8c <ADC1_2_IRQHandler>

08000d8e <Xoodoo_StaticInitialize>:
#include "Xoodoo.h"

/* ---------------------------------------------------------------- */

void Xoodoo_StaticInitialize( void )
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <Xoodoo_Initialize>:

/* ---------------------------------------------------------------- */

void Xoodoo_Initialize(void *state)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
    memset(state, 0, NLANES*sizeof(tXoodooLane));
 8000da4:	2230      	movs	r2, #48	; 0x30
 8000da6:	2100      	movs	r1, #0
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f001 fd6b 	bl	8002884 <memset>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <Xoodoo_AddByte>:

/* ---------------------------------------------------------------- */

void Xoodoo_AddByte(void *state, unsigned char byte, unsigned int offset)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	607a      	str	r2, [r7, #4]
 8000dc4:	72fb      	strb	r3, [r7, #11]
    assert(offset < NLANES*sizeof(tXoodooLane));
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b2f      	cmp	r3, #47	; 0x2f
 8000dca:	d905      	bls.n	8000dd8 <Xoodoo_AddByte+0x20>
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <Xoodoo_AddByte+0x40>)
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <Xoodoo_AddByte+0x44>)
 8000dd0:	2127      	movs	r1, #39	; 0x27
 8000dd2:	480b      	ldr	r0, [pc, #44]	; (8000e00 <Xoodoo_AddByte+0x48>)
 8000dd4:	f001 fcee 	bl	80027b4 <__assert_func>
    ((unsigned char *)state)[offset] ^= byte;
 8000dd8:	68fa      	ldr	r2, [r7, #12]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	7819      	ldrb	r1, [r3, #0]
 8000de0:	68fa      	ldr	r2, [r7, #12]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4413      	add	r3, r2
 8000de6:	7afa      	ldrb	r2, [r7, #11]
 8000de8:	404a      	eors	r2, r1
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	701a      	strb	r2, [r3, #0]
}
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	08003ba4 	.word	0x08003ba4
 8000dfc:	08003d64 	.word	0x08003d64
 8000e00:	08003bc8 	.word	0x08003bc8

08000e04 <Xoodoo_AddBytes>:

/* ---------------------------------------------------------------- */

void Xoodoo_AddBytes(void *state, const unsigned char *data, unsigned int offset, unsigned int length)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
 8000e10:	603b      	str	r3, [r7, #0]
    unsigned int i;

    assert(offset < NLANES*sizeof(tXoodooLane));
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2b2f      	cmp	r3, #47	; 0x2f
 8000e16:	d905      	bls.n	8000e24 <Xoodoo_AddBytes+0x20>
 8000e18:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <Xoodoo_AddBytes+0x78>)
 8000e1a:	4a19      	ldr	r2, [pc, #100]	; (8000e80 <Xoodoo_AddBytes+0x7c>)
 8000e1c:	2131      	movs	r1, #49	; 0x31
 8000e1e:	4819      	ldr	r0, [pc, #100]	; (8000e84 <Xoodoo_AddBytes+0x80>)
 8000e20:	f001 fcc8 	bl	80027b4 <__assert_func>
    assert(offset+length <= NLANES*sizeof(tXoodooLane));
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	4413      	add	r3, r2
 8000e2a:	2b30      	cmp	r3, #48	; 0x30
 8000e2c:	d905      	bls.n	8000e3a <Xoodoo_AddBytes+0x36>
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <Xoodoo_AddBytes+0x84>)
 8000e30:	4a13      	ldr	r2, [pc, #76]	; (8000e80 <Xoodoo_AddBytes+0x7c>)
 8000e32:	2132      	movs	r1, #50	; 0x32
 8000e34:	4813      	ldr	r0, [pc, #76]	; (8000e84 <Xoodoo_AddBytes+0x80>)
 8000e36:	f001 fcbd 	bl	80027b4 <__assert_func>
    for(i=0; i<length; i++)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
 8000e3e:	e014      	b.n	8000e6a <Xoodoo_AddBytes+0x66>
        ((unsigned char *)state)[offset+i] ^= data[i];
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	4413      	add	r3, r2
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	4413      	add	r3, r2
 8000e4a:	7819      	ldrb	r1, [r3, #0]
 8000e4c:	68ba      	ldr	r2, [r7, #8]
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	4413      	add	r3, r2
 8000e52:	781a      	ldrb	r2, [r3, #0]
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	4403      	add	r3, r0
 8000e5a:	68f8      	ldr	r0, [r7, #12]
 8000e5c:	4403      	add	r3, r0
 8000e5e:	404a      	eors	r2, r1
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	701a      	strb	r2, [r3, #0]
    for(i=0; i<length; i++)
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	3301      	adds	r3, #1
 8000e68:	617b      	str	r3, [r7, #20]
 8000e6a:	697a      	ldr	r2, [r7, #20]
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d3e6      	bcc.n	8000e40 <Xoodoo_AddBytes+0x3c>
}
 8000e72:	bf00      	nop
 8000e74:	bf00      	nop
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	08003ba4 	.word	0x08003ba4
 8000e80:	08003d74 	.word	0x08003d74
 8000e84:	08003bc8 	.word	0x08003bc8
 8000e88:	08003c1c 	.word	0x08003c1c

08000e8c <Xoodoo_ExtractBytes>:
}

/* ---------------------------------------------------------------- */

void Xoodoo_ExtractBytes(const void *state, unsigned char *data, unsigned int offset, unsigned int length)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
 8000e98:	603b      	str	r3, [r7, #0]
    assert(offset < NLANES*sizeof(tXoodooLane));
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b2f      	cmp	r3, #47	; 0x2f
 8000e9e:	d905      	bls.n	8000eac <Xoodoo_ExtractBytes+0x20>
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <Xoodoo_ExtractBytes+0x50>)
 8000ea2:	4a0f      	ldr	r2, [pc, #60]	; (8000ee0 <Xoodoo_ExtractBytes+0x54>)
 8000ea4:	214c      	movs	r1, #76	; 0x4c
 8000ea6:	480f      	ldr	r0, [pc, #60]	; (8000ee4 <Xoodoo_ExtractBytes+0x58>)
 8000ea8:	f001 fc84 	bl	80027b4 <__assert_func>
    assert(offset+length <= NLANES*sizeof(tXoodooLane));
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	2b30      	cmp	r3, #48	; 0x30
 8000eb4:	d905      	bls.n	8000ec2 <Xoodoo_ExtractBytes+0x36>
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <Xoodoo_ExtractBytes+0x5c>)
 8000eb8:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <Xoodoo_ExtractBytes+0x54>)
 8000eba:	214d      	movs	r1, #77	; 0x4d
 8000ebc:	4809      	ldr	r0, [pc, #36]	; (8000ee4 <Xoodoo_ExtractBytes+0x58>)
 8000ebe:	f001 fc79 	bl	80027b4 <__assert_func>
    memcpy(data, (unsigned char*)state+offset, length);
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	4619      	mov	r1, r3
 8000ecc:	68b8      	ldr	r0, [r7, #8]
 8000ece:	f001 fccb 	bl	8002868 <memcpy>
}
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	08003ba4 	.word	0x08003ba4
 8000ee0:	08003d84 	.word	0x08003d84
 8000ee4:	08003bc8 	.word	0x08003bc8
 8000ee8:	08003c1c 	.word	0x08003c1c

08000eec <fromBytesToWords>:

#endif


static void fromBytesToWords(tXoodooLane *stateAsWords, const unsigned char *state)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
    unsigned int i, j;

    for(i=0; i<NLANES; i++) {
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	e027      	b.n	8000f4c <fromBytesToWords+0x60>
        stateAsWords[i] = 0;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	4413      	add	r3, r2
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
        for(j=0; j<sizeof(tXoodooLane); j++)
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	e018      	b.n	8000f40 <fromBytesToWords+0x54>
            stateAsWords[i] |= (tXoodooLane)(state[i*sizeof(tXoodooLane)+j]) << (8*j);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	6819      	ldr	r1, [r3, #0]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	009a      	lsls	r2, r3, #2
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4413      	add	r3, r2
 8000f20:	683a      	ldr	r2, [r7, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	409a      	lsls	r2, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	4403      	add	r3, r0
 8000f36:	430a      	orrs	r2, r1
 8000f38:	601a      	str	r2, [r3, #0]
        for(j=0; j<sizeof(tXoodooLane); j++)
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	d9e3      	bls.n	8000f0e <fromBytesToWords+0x22>
    for(i=0; i<NLANES; i++) {
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2b0b      	cmp	r3, #11
 8000f50:	d9d4      	bls.n	8000efc <fromBytesToWords+0x10>
    }
}
 8000f52:	bf00      	nop
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <fromWordsToBytes>:

static void fromWordsToBytes(unsigned char *state, const tXoodooLane *stateAsWords)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
    unsigned int i, j;

    for(i=0; i<NLANES; i++)
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	e01c      	b.n	8000faa <fromWordsToBytes+0x4a>
        for(j=0; j<sizeof(tXoodooLane); j++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	e013      	b.n	8000f9e <fromWordsToBytes+0x3e>
            state[i*sizeof(tXoodooLane)+j] = (stateAsWords[i] >> (8*j)) & 0xFF;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	fa22 f103 	lsr.w	r1, r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	009a      	lsls	r2, r3, #2
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	4413      	add	r3, r2
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	4413      	add	r3, r2
 8000f94:	b2ca      	uxtb	r2, r1
 8000f96:	701a      	strb	r2, [r3, #0]
        for(j=0; j<sizeof(tXoodooLane); j++)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	d9e8      	bls.n	8000f76 <fromWordsToBytes+0x16>
    for(i=0; i<NLANES; i++)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2b0b      	cmp	r3, #11
 8000fae:	d9df      	bls.n	8000f70 <fromWordsToBytes+0x10>
}
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
	...

08000fc0 <Xoodoo_Round>:

static void Xoodoo_Round( tXoodooLane * a, tXoodooLane rc )
{
 8000fc0:	b590      	push	{r4, r7, lr}
 8000fc2:	b099      	sub	sp, #100	; 0x64
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
    tXoodooLane    b[NLANES];
    tXoodooLane    p[NCOLUMS];
    tXoodooLane    e[NCOLUMS];

    /* Theta: Column Parity Mixer */
    for (x=0; x<NCOLUMS; ++x)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000fce:	e022      	b.n	8001016 <Xoodoo_Round+0x56>
        p[x] = a[index(x,0)] ^ a[index(x,1)] ^ a[index(x,2)];
 8000fd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	4413      	add	r3, r2
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	6879      	ldr	r1, [r7, #4]
 8000fea:	440b      	add	r3, r1
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	405a      	eors	r2, r3
 8000ff0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	3308      	adds	r3, #8
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	440b      	add	r3, r1
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	405a      	eors	r2, r3
 8001002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800100a:	440b      	add	r3, r1
 800100c:	f843 2c48 	str.w	r2, [r3, #-72]
    for (x=0; x<NCOLUMS; ++x)
 8001010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001012:	3301      	adds	r3, #1
 8001014:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001016:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001018:	2b03      	cmp	r3, #3
 800101a:	d9d9      	bls.n	8000fd0 <Xoodoo_Round+0x10>
    for (x=0; x<NCOLUMS; ++x)
 800101c:	2300      	movs	r3, #0
 800101e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001020:	e022      	b.n	8001068 <Xoodoo_Round+0xa8>
        e[x] = ROTL32(p[(x-1)%4], 5) ^ ROTL32(p[(x-1)%4], 14);
 8001022:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001024:	3b01      	subs	r3, #1
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001030:	4413      	add	r3, r2
 8001032:	f853 3c48 	ldr.w	r3, [r3, #-72]
 8001036:	ea4f 62f3 	mov.w	r2, r3, ror #27
 800103a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800103c:	3b01      	subs	r3, #1
 800103e:	f003 0303 	and.w	r3, r3, #3
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001048:	440b      	add	r3, r1
 800104a:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800104e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8001052:	405a      	eors	r2, r3
 8001054:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800105c:	440b      	add	r3, r1
 800105e:	f843 2c58 	str.w	r2, [r3, #-88]
    for (x=0; x<NCOLUMS; ++x)
 8001062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001064:	3301      	adds	r3, #1
 8001066:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800106a:	2b03      	cmp	r3, #3
 800106c:	d9d9      	bls.n	8001022 <Xoodoo_Round+0x62>
    for (x=0; x<NCOLUMS; ++x)
 800106e:	2300      	movs	r3, #0
 8001070:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001072:	e02e      	b.n	80010d2 <Xoodoo_Round+0x112>
        for (y=0; y<NROWS; ++y)
 8001074:	2300      	movs	r3, #0
 8001076:	65bb      	str	r3, [r7, #88]	; 0x58
 8001078:	e025      	b.n	80010c6 <Xoodoo_Round+0x106>
            a[index(x,y)] ^= e[x];
 800107a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800107c:	4b98      	ldr	r3, [pc, #608]	; (80012e0 <Xoodoo_Round+0x320>)
 800107e:	fba3 2301 	umull	r2, r3, r3, r1
 8001082:	085b      	lsrs	r3, r3, #1
 8001084:	461a      	mov	r2, r3
 8001086:	0052      	lsls	r2, r2, #1
 8001088:	441a      	add	r2, r3
 800108a:	1a8b      	subs	r3, r1, r2
 800108c:	0099      	lsls	r1, r3, #2
 800108e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001090:	f002 0203 	and.w	r2, r2, #3
 8001094:	440a      	add	r2, r1
 8001096:	0092      	lsls	r2, r2, #2
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	440a      	add	r2, r1
 800109c:	6811      	ldr	r1, [r2, #0]
 800109e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80010a0:	0092      	lsls	r2, r2, #2
 80010a2:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80010a6:	4402      	add	r2, r0
 80010a8:	f852 2c58 	ldr.w	r2, [r2, #-88]
 80010ac:	0098      	lsls	r0, r3, #2
 80010ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	4403      	add	r3, r0
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	4403      	add	r3, r0
 80010bc:	404a      	eors	r2, r1
 80010be:	601a      	str	r2, [r3, #0]
        for (y=0; y<NROWS; ++y)
 80010c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010c2:	3301      	adds	r3, #1
 80010c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80010c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d9d6      	bls.n	800107a <Xoodoo_Round+0xba>
    for (x=0; x<NCOLUMS; ++x)
 80010cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010ce:	3301      	adds	r3, #1
 80010d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80010d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	d9cd      	bls.n	8001074 <Xoodoo_Round+0xb4>
    Dump("Theta", a, 2);

    /* Rho-west: plane shift */
    for (x=0; x<NCOLUMS; ++x) {
 80010d8:	2300      	movs	r3, #0
 80010da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80010dc:	e039      	b.n	8001152 <Xoodoo_Round+0x192>
        b[index(x,0)] = a[index(x,0)];
 80010de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	441a      	add	r2, r3
 80010ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010ec:	f003 0303 	and.w	r3, r3, #3
 80010f0:	6812      	ldr	r2, [r2, #0]
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80010f8:	440b      	add	r3, r1
 80010fa:	f843 2c38 	str.w	r2, [r3, #-56]
        b[index(x,1)] = a[index(x-1,1)];
 80010fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001100:	3b01      	subs	r3, #1
 8001102:	f003 0303 	and.w	r3, r3, #3
 8001106:	3304      	adds	r3, #4
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	441a      	add	r2, r3
 800110e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	3304      	adds	r3, #4
 8001116:	6812      	ldr	r2, [r2, #0]
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800111e:	440b      	add	r3, r1
 8001120:	f843 2c38 	str.w	r2, [r3, #-56]
        b[index(x,2)] = ROTL32(a[index(x,2)], 11);
 8001124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	3308      	adds	r3, #8
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	3308      	adds	r3, #8
 800113c:	ea4f 5272 	mov.w	r2, r2, ror #21
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001146:	440b      	add	r3, r1
 8001148:	f843 2c38 	str.w	r2, [r3, #-56]
    for (x=0; x<NCOLUMS; ++x) {
 800114c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800114e:	3301      	adds	r3, #1
 8001150:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001154:	2b03      	cmp	r3, #3
 8001156:	d9c2      	bls.n	80010de <Xoodoo_Round+0x11e>
    }
    memcpy( a, b, sizeof(b) );
 8001158:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800115c:	2230      	movs	r2, #48	; 0x30
 800115e:	4619      	mov	r1, r3
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f001 fb81 	bl	8002868 <memcpy>
    Dump("Rho-west", a, 2);
        
    /* Iota: round constant */
    a[0] ^= rc;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	405a      	eors	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	601a      	str	r2, [r3, #0]
    Dump("Iota", a, 2);

    /* Chi: non linear layer */
    for (x=0; x<NCOLUMS; ++x)
 8001172:	2300      	movs	r3, #0
 8001174:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001176:	e05b      	b.n	8001230 <Xoodoo_Round+0x270>
        for (y=0; y<NROWS; ++y)
 8001178:	2300      	movs	r3, #0
 800117a:	65bb      	str	r3, [r7, #88]	; 0x58
 800117c:	e052      	b.n	8001224 <Xoodoo_Round+0x264>
            b[index(x,y)] = a[index(x,y)] ^ (~a[index(x,y+1)] & a[index(x,y+2)]);
 800117e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001180:	4b57      	ldr	r3, [pc, #348]	; (80012e0 <Xoodoo_Round+0x320>)
 8001182:	fba3 2301 	umull	r2, r3, r3, r1
 8001186:	085a      	lsrs	r2, r3, #1
 8001188:	4613      	mov	r3, r2
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	4413      	add	r3, r2
 800118e:	1aca      	subs	r2, r1, r3
 8001190:	0092      	lsls	r2, r2, #2
 8001192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	4413      	add	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	681c      	ldr	r4, [r3, #0]
 80011a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011a4:	1c59      	adds	r1, r3, #1
 80011a6:	4b4e      	ldr	r3, [pc, #312]	; (80012e0 <Xoodoo_Round+0x320>)
 80011a8:	fba3 2301 	umull	r2, r3, r3, r1
 80011ac:	085a      	lsrs	r2, r3, #1
 80011ae:	4613      	mov	r3, r2
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	4413      	add	r3, r2
 80011b4:	1aca      	subs	r2, r1, r3
 80011b6:	0092      	lsls	r2, r2, #2
 80011b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	4413      	add	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	43d8      	mvns	r0, r3
 80011ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011cc:	1c99      	adds	r1, r3, #2
 80011ce:	4b44      	ldr	r3, [pc, #272]	; (80012e0 <Xoodoo_Round+0x320>)
 80011d0:	fba3 2301 	umull	r2, r3, r3, r1
 80011d4:	085a      	lsrs	r2, r3, #1
 80011d6:	4613      	mov	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	1aca      	subs	r2, r1, r3
 80011de:	0092      	lsls	r2, r2, #2
 80011e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	4413      	add	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4018      	ands	r0, r3
 80011f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80011f4:	4b3a      	ldr	r3, [pc, #232]	; (80012e0 <Xoodoo_Round+0x320>)
 80011f6:	fba3 2301 	umull	r2, r3, r3, r1
 80011fa:	085a      	lsrs	r2, r3, #1
 80011fc:	4613      	mov	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	4413      	add	r3, r2
 8001202:	1aca      	subs	r2, r1, r3
 8001204:	0092      	lsls	r2, r2, #2
 8001206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	4413      	add	r3, r2
 800120e:	ea84 0200 	eor.w	r2, r4, r0
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001218:	440b      	add	r3, r1
 800121a:	f843 2c38 	str.w	r2, [r3, #-56]
        for (y=0; y<NROWS; ++y)
 800121e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001220:	3301      	adds	r3, #1
 8001222:	65bb      	str	r3, [r7, #88]	; 0x58
 8001224:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001226:	2b02      	cmp	r3, #2
 8001228:	d9a9      	bls.n	800117e <Xoodoo_Round+0x1be>
    for (x=0; x<NCOLUMS; ++x)
 800122a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800122c:	3301      	adds	r3, #1
 800122e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001232:	2b03      	cmp	r3, #3
 8001234:	d9a0      	bls.n	8001178 <Xoodoo_Round+0x1b8>
    memcpy( a, b, sizeof(b) );
 8001236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800123a:	2230      	movs	r2, #48	; 0x30
 800123c:	4619      	mov	r1, r3
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f001 fb12 	bl	8002868 <memcpy>
    Dump("Chi", a, 2);

    /* Rho-east: plane shift */
    for (x=0; x<NCOLUMS; ++x) {
 8001244:	2300      	movs	r3, #0
 8001246:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001248:	e03b      	b.n	80012c2 <Xoodoo_Round+0x302>
        b[index(x,0)] = a[index(x,0)];
 800124a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	441a      	add	r2, r3
 8001256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001258:	f003 0303 	and.w	r3, r3, #3
 800125c:	6812      	ldr	r2, [r2, #0]
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001264:	440b      	add	r3, r1
 8001266:	f843 2c38 	str.w	r2, [r3, #-56]
        b[index(x,1)] = ROTL32(a[index(x,1)], 1);
 800126a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	3304      	adds	r3, #4
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	4413      	add	r3, r2
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800127c:	f003 0303 	and.w	r3, r3, #3
 8001280:	3304      	adds	r3, #4
 8001282:	ea4f 72f2 	mov.w	r2, r2, ror #31
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800128c:	440b      	add	r3, r1
 800128e:	f843 2c38 	str.w	r2, [r3, #-56]
        b[index(x,2)] = ROTL32(a[index(x+2,2)], 8);
 8001292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001294:	3302      	adds	r3, #2
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	3308      	adds	r3, #8
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	4413      	add	r3, r2
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	3308      	adds	r3, #8
 80012ac:	ea4f 6232 	mov.w	r2, r2, ror #24
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80012b6:	440b      	add	r3, r1
 80012b8:	f843 2c38 	str.w	r2, [r3, #-56]
    for (x=0; x<NCOLUMS; ++x) {
 80012bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012be:	3301      	adds	r3, #1
 80012c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80012c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	d9c0      	bls.n	800124a <Xoodoo_Round+0x28a>
    }
    memcpy( a, b, sizeof(b) );
 80012c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012cc:	2230      	movs	r2, #48	; 0x30
 80012ce:	4619      	mov	r1, r3
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f001 fac9 	bl	8002868 <memcpy>
    Dump("Rho-east", a, 2);

}
 80012d6:	bf00      	nop
 80012d8:	3764      	adds	r7, #100	; 0x64
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd90      	pop	{r4, r7, pc}
 80012de:	bf00      	nop
 80012e0:	aaaaaaab 	.word	0xaaaaaaab

080012e4 <Xoodoo_Permute_Nrounds>:
    _rc2,
    _rc1
};

void Xoodoo_Permute_Nrounds( void * state, uint32_t nr )
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b090      	sub	sp, #64	; 0x40
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
    tXoodooLane        a[NLANES];
    unsigned int    i;

    fromBytesToWords(a, (const unsigned char *)state);
 80012ee:	f107 030c 	add.w	r3, r7, #12
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fdf9 	bl	8000eec <fromBytesToWords>

    for (i = MAXROUNDS - nr; i < MAXROUNDS; ++i ) {
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	f1c3 030c 	rsb	r3, r3, #12
 8001300:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001302:	e00c      	b.n	800131e <Xoodoo_Permute_Nrounds+0x3a>
        Xoodoo_Round( a, RC[i] );
 8001304:	4a0c      	ldr	r2, [pc, #48]	; (8001338 <Xoodoo_Permute_Nrounds+0x54>)
 8001306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001308:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fe54 	bl	8000fc0 <Xoodoo_Round>
    for (i = MAXROUNDS - nr; i < MAXROUNDS; ++i ) {
 8001318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800131a:	3301      	adds	r3, #1
 800131c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800131e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001320:	2b0b      	cmp	r3, #11
 8001322:	d9ef      	bls.n	8001304 <Xoodoo_Permute_Nrounds+0x20>
        Dump("Round", a, 1);
    }
    Dump("Permutation", a, 0);

    fromWordsToBytes((unsigned char *)state, a);
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	4619      	mov	r1, r3
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff fe18 	bl	8000f60 <fromWordsToBytes>

}
 8001330:	bf00      	nop
 8001332:	3740      	adds	r7, #64	; 0x40
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	08003d34 	.word	0x08003d34

0800133c <Xoodoo_Permute_12rounds>:
{
    Xoodoo_Permute_Nrounds( state, 6 );
}

void Xoodoo_Permute_12rounds( uint32_t * state)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
    Xoodoo_Permute_Nrounds( state, 12 );
 8001344:	210c      	movs	r1, #12
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ffcc 	bl	80012e4 <Xoodoo_Permute_Nrounds>
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <Xoodyak_Down>:
#define Cyclist_lRatchet                JOIN(prefix, _lRatchet)

/* ------- Cyclist internal interfaces ------- */

static void Cyclist_Down(Cyclist_Instance *instance, const uint8_t *Xi, unsigned int XiLen, uint8_t Cd)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
 8001360:	70fb      	strb	r3, [r7, #3]
    SnP_AddBytes(instance->state, Xi, 0, XiLen);
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	68b9      	ldr	r1, [r7, #8]
 800136a:	f7ff fd4b 	bl	8000e04 <Xoodoo_AddBytes>
    SnP_AddByte(instance->state, 0x01, XiLen);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	2101      	movs	r1, #1
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fd1f 	bl	8000db8 <Xoodoo_AddByte>
    SnP_AddByte(instance->state, (instance->mode == Cyclist_ModeHash) ? (Cd & 0x01) : Cd, Cyclist_f_bPrime - 1);
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001380:	2b01      	cmp	r3, #1
 8001382:	d104      	bne.n	800138e <Xoodyak_Down+0x3a>
 8001384:	78fb      	ldrb	r3, [r7, #3]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	b2db      	uxtb	r3, r3
 800138c:	e000      	b.n	8001390 <Xoodyak_Down+0x3c>
 800138e:	78fb      	ldrb	r3, [r7, #3]
 8001390:	222f      	movs	r2, #47	; 0x2f
 8001392:	4619      	mov	r1, r3
 8001394:	f7ff fd10 	bl	8000db8 <Xoodoo_AddByte>
    instance->phase = Cyclist_PhaseDown;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2201      	movs	r2, #1
 800139c:	631a      	str	r2, [r3, #48]	; 0x30

}
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <Xoodyak_Up>:

static void Cyclist_Up(Cyclist_Instance *instance, uint8_t *Yi, unsigned int YiLen, uint8_t Cu)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b084      	sub	sp, #16
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	60f8      	str	r0, [r7, #12]
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
 80013b2:	70fb      	strb	r3, [r7, #3]
    #if defined(OUTPUT)
    uint8_t   s[Cyclist_f_bPrime];
    #endif

    if (instance->mode != Cyclist_ModeHash) {
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d005      	beq.n	80013c8 <Xoodyak_Up+0x22>
        SnP_AddByte(instance->state, Cu, Cyclist_f_bPrime - 1);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	78f9      	ldrb	r1, [r7, #3]
 80013c0:	222f      	movs	r2, #47	; 0x2f
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fcf8 	bl	8000db8 <Xoodoo_AddByte>
    if (instance->file != NULL) {
        SnP_ExtractBytes( instance->stateShadow, s, 0, Cyclist_f_bPrime );
        SnP_ExtractAndAddBytes( instance->state, s, s, 0, Cyclist_f_bPrime );
    }
    #endif
    SnP_Permute( instance->state );
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff ffb6 	bl	800133c <Xoodoo_Permute_12rounds>
        SnP_ExtractBytes( instance->stateShadow, s, 0, Cyclist_f_bPrime );
        fprintf( instance->file, "After f() ");
        displayByteString( instance->file, "", s, Cyclist_f_bPrime );
    }
    #endif
    instance->phase = Cyclist_PhaseUp;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2202      	movs	r2, #2
 80013d4:	631a      	str	r2, [r3, #48]	; 0x30
    SnP_ExtractBytes( instance->state, Yi, 0, YiLen );
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	68b9      	ldr	r1, [r7, #8]
 80013de:	f7ff fd55 	bl	8000e8c <Xoodoo_ExtractBytes>
}
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <Xoodyak_AbsorbAny>:

static void Cyclist_AbsorbAny(Cyclist_Instance *instance, const uint8_t *X, size_t XLen, unsigned int r, uint8_t Cd)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	60f8      	str	r0, [r7, #12]
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	607a      	str	r2, [r7, #4]
 80013f6:	603b      	str	r3, [r7, #0]
    unsigned int splitLen;

    do {
        if (instance->phase != Cyclist_PhaseUp) {
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d005      	beq.n	800140c <Xoodyak_AbsorbAny+0x22>
            Cyclist_Up(instance, NULL, 0, 0);
 8001400:	2300      	movs	r3, #0
 8001402:	2200      	movs	r2, #0
 8001404:	2100      	movs	r1, #0
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f7ff ffcd 	bl	80013a6 <Xoodyak_Up>
        }
        splitLen = MyMin(XLen, r);
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4293      	cmp	r3, r2
 8001412:	bf28      	it	cs
 8001414:	4613      	movcs	r3, r2
 8001416:	617b      	str	r3, [r7, #20]
        Cyclist_Down(instance, X, splitLen, Cd);
 8001418:	f897 3020 	ldrb.w	r3, [r7, #32]
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	68b9      	ldr	r1, [r7, #8]
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f7ff ff97 	bl	8001354 <Xoodyak_Down>
        Cd = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	f887 3020 	strb.w	r3, [r7, #32]
        X       += splitLen;
 800142c:	68ba      	ldr	r2, [r7, #8]
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	4413      	add	r3, r2
 8001432:	60bb      	str	r3, [r7, #8]
        XLen    -= splitLen;
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	607b      	str	r3, [r7, #4]
    } while ( XLen != 0 );
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1da      	bne.n	80013f8 <Xoodyak_AbsorbAny+0xe>
}
 8001442:	bf00      	nop
 8001444:	bf00      	nop
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <Xoodyak_AbsorbKey>:

static void Cyclist_AbsorbKey(Cyclist_Instance *instance, const uint8_t *K, size_t KLen, const uint8_t *ID, size_t IDLen, const uint8_t *counter, size_t counterLen)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b092      	sub	sp, #72	; 0x48
 8001450:	af02      	add	r7, sp, #8
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
 8001458:	603b      	str	r3, [r7, #0]
    uint8_t KID[Cyclist_Rkin];

    assert(instance->mode == Cyclist_ModeHash);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800145e:	2b01      	cmp	r3, #1
 8001460:	d005      	beq.n	800146e <Xoodyak_AbsorbKey+0x22>
 8001462:	4b29      	ldr	r3, [pc, #164]	; (8001508 <Xoodyak_AbsorbKey+0xbc>)
 8001464:	4a29      	ldr	r2, [pc, #164]	; (800150c <Xoodyak_AbsorbKey+0xc0>)
 8001466:	216a      	movs	r1, #106	; 0x6a
 8001468:	4829      	ldr	r0, [pc, #164]	; (8001510 <Xoodyak_AbsorbKey+0xc4>)
 800146a:	f001 f9a3 	bl	80027b4 <__assert_func>
    assert((KLen + IDLen) <= (Cyclist_Rkin - 1));
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001472:	4413      	add	r3, r2
 8001474:	2b2b      	cmp	r3, #43	; 0x2b
 8001476:	d905      	bls.n	8001484 <Xoodyak_AbsorbKey+0x38>
 8001478:	4b26      	ldr	r3, [pc, #152]	; (8001514 <Xoodyak_AbsorbKey+0xc8>)
 800147a:	4a24      	ldr	r2, [pc, #144]	; (800150c <Xoodyak_AbsorbKey+0xc0>)
 800147c:	216b      	movs	r1, #107	; 0x6b
 800147e:	4824      	ldr	r0, [pc, #144]	; (8001510 <Xoodyak_AbsorbKey+0xc4>)
 8001480:	f001 f998 	bl	80027b4 <__assert_func>

    instance->mode      = Cyclist_ModeKeyed;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2202      	movs	r2, #2
 8001488:	635a      	str	r2, [r3, #52]	; 0x34
    instance->Rabsorb   = Cyclist_Rkin;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	222c      	movs	r2, #44	; 0x2c
 800148e:	639a      	str	r2, [r3, #56]	; 0x38
    instance->Rsqueeze  = Cyclist_Rkout;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2218      	movs	r2, #24
 8001494:	63da      	str	r2, [r3, #60]	; 0x3c
    if (KLen != 0) {
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d031      	beq.n	8001500 <Xoodyak_AbsorbKey+0xb4>
        memcpy(KID, K, KLen);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	68b9      	ldr	r1, [r7, #8]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f001 f9df 	bl	8002868 <memcpy>
        memcpy(KID + KLen, ID, IDLen);
 80014aa:	f107 0214 	add.w	r2, r7, #20
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80014b4:	6839      	ldr	r1, [r7, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f001 f9d6 	bl	8002868 <memcpy>
        KID[KLen + IDLen] = (uint8_t)IDLen;
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014c0:	4413      	add	r3, r2
 80014c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80014ca:	440b      	add	r3, r1
 80014cc:	f803 2c2c 	strb.w	r2, [r3, #-44]
        Cyclist_AbsorbAny(instance, KID, KLen + IDLen + 1, instance->Rabsorb, 0x02);
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014d4:	4413      	add	r3, r2
 80014d6:	1c5a      	adds	r2, r3, #1
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014dc:	f107 0114 	add.w	r1, r7, #20
 80014e0:	2002      	movs	r0, #2
 80014e2:	9000      	str	r0, [sp, #0]
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	f7ff ff80 	bl	80013ea <Xoodyak_AbsorbAny>
        if (counterLen != 0) {
 80014ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d007      	beq.n	8001500 <Xoodyak_AbsorbKey+0xb4>
            Cyclist_AbsorbAny(instance, counter, counterLen, 1, 0x00);
 80014f0:	2300      	movs	r3, #0
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2301      	movs	r3, #1
 80014f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80014f8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	f7ff ff75 	bl	80013ea <Xoodyak_AbsorbAny>
        }
    }
}
 8001500:	bf00      	nop
 8001502:	3740      	adds	r7, #64	; 0x40
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	08003c70 	.word	0x08003c70
 800150c:	08003d98 	.word	0x08003d98
 8001510:	08003c94 	.word	0x08003c94
 8001514:	08003ce0 	.word	0x08003ce0

08001518 <Xoodyak_SqueezeAny>:

static void Cyclist_SqueezeAny(Cyclist_Instance *instance, uint8_t *Y, size_t YLen, uint8_t Cu)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
 8001524:	70fb      	strb	r3, [r7, #3]
    unsigned int len;

    len = MyMin(YLen, instance->Rsqueeze );
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	4293      	cmp	r3, r2
 800152e:	bf28      	it	cs
 8001530:	4613      	movcs	r3, r2
 8001532:	617b      	str	r3, [r7, #20]
    Cyclist_Up(instance, Y, len, Cu);
 8001534:	78fb      	ldrb	r3, [r7, #3]
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f7ff ff33 	bl	80013a6 <Xoodyak_Up>
    Y += len;
 8001540:	68ba      	ldr	r2, [r7, #8]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	4413      	add	r3, r2
 8001546:	60bb      	str	r3, [r7, #8]
    YLen -= len;
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	607b      	str	r3, [r7, #4]
    while (YLen != 0) {
 8001550:	e01a      	b.n	8001588 <Xoodyak_SqueezeAny+0x70>
        Cyclist_Down(instance, NULL, 0, 0);
 8001552:	2300      	movs	r3, #0
 8001554:	2200      	movs	r2, #0
 8001556:	2100      	movs	r1, #0
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f7ff fefb 	bl	8001354 <Xoodyak_Down>
        len = MyMin(YLen, instance->Rsqueeze );
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	4293      	cmp	r3, r2
 8001566:	bf28      	it	cs
 8001568:	4613      	movcs	r3, r2
 800156a:	617b      	str	r3, [r7, #20]
        Cyclist_Up(instance, Y, len, 0);
 800156c:	2300      	movs	r3, #0
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	68b9      	ldr	r1, [r7, #8]
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f7ff ff17 	bl	80013a6 <Xoodyak_Up>
        Y += len;
 8001578:	68ba      	ldr	r2, [r7, #8]
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	4413      	add	r3, r2
 800157e:	60bb      	str	r3, [r7, #8]
        YLen -= len;
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	607b      	str	r3, [r7, #4]
    while (YLen != 0) {
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1e1      	bne.n	8001552 <Xoodyak_SqueezeAny+0x3a>
    }
}
 800158e:	bf00      	nop
 8001590:	bf00      	nop
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <Xoodyak_Initialize>:
}

/* ------- Cyclist interfaces ------- */

void Cyclist_Initialize(Cyclist_Instance *instance, const uint8_t *K, size_t KLen, const uint8_t *ID, size_t IDLen, const uint8_t *counter, size_t counterLen)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af04      	add	r7, sp, #16
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
 80015a4:	603b      	str	r3, [r7, #0]
    SnP_StaticInitialize();
 80015a6:	f7ff fbf2 	bl	8000d8e <Xoodoo_StaticInitialize>
    SnP_Initialize(instance->state);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff fbf5 	bl	8000d9c <Xoodoo_Initialize>
    instance->phase     = Cyclist_PhaseUp;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2202      	movs	r2, #2
 80015b6:	631a      	str	r2, [r3, #48]	; 0x30
    instance->mode      = Cyclist_ModeHash;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2201      	movs	r2, #1
 80015bc:	635a      	str	r2, [r3, #52]	; 0x34
    instance->Rabsorb   = Cyclist_Rhash;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2210      	movs	r2, #16
 80015c2:	639a      	str	r2, [r3, #56]	; 0x38
    instance->Rsqueeze  = Cyclist_Rhash;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2210      	movs	r2, #16
 80015c8:	63da      	str	r2, [r3, #60]	; 0x3c
    #ifdef OUTPUT
    instance->file = 0;
    SnP_Initialize( instance->stateShadow );
    #endif
    if (KLen != 0) {
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d00b      	beq.n	80015e8 <Xoodyak_Initialize+0x50>
        Cyclist_AbsorbKey(instance, K, KLen, ID, IDLen, counter, counterLen);
 80015d0:	6a3b      	ldr	r3, [r7, #32]
 80015d2:	9302      	str	r3, [sp, #8]
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f7ff ff32 	bl	800144c <Xoodyak_AbsorbKey>
    }
}
 80015e8:	bf00      	nop
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <Xoodyak_Absorb>:

void Cyclist_Absorb(Cyclist_Instance *instance, const uint8_t *X, size_t XLen)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af02      	add	r7, sp, #8
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
    Cyclist_AbsorbAny(instance, X, XLen, instance->Rabsorb, 0x03);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001600:	2203      	movs	r2, #3
 8001602:	9200      	str	r2, [sp, #0]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	68b9      	ldr	r1, [r7, #8]
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f7ff feee 	bl	80013ea <Xoodyak_AbsorbAny>
}
 800160e:	bf00      	nop
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <Xoodyak_Squeeze>:
    assert(instance->mode == Cyclist_ModeKeyed);
    Cyclist_Crypt(instance, C, P, CLen, 1);
}

void Cyclist_Squeeze(Cyclist_Instance *instance, uint8_t *Y, size_t YLen)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b084      	sub	sp, #16
 800161a:	af00      	add	r7, sp, #0
 800161c:	60f8      	str	r0, [r7, #12]
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
    Cyclist_SqueezeAny(instance, Y, YLen, 0x40);
 8001622:	2340      	movs	r3, #64	; 0x40
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	68b9      	ldr	r1, [r7, #8]
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f7ff ff75 	bl	8001518 <Xoodyak_SqueezeAny>
}
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <crypto_hash>:
#endif

#include "Xoodyak.h"

int crypto_hash(unsigned char *out, const unsigned char *in, unsigned long long inlen)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b098      	sub	sp, #96	; 0x60
 800163a:	af04      	add	r7, sp, #16
 800163c:	60f8      	str	r0, [r7, #12]
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	e9c7 2300 	strd	r2, r3, [r7]
    Xoodyak_Instance    instance;

    Xoodyak_Initialize(&instance, NULL, 0, NULL, 0, NULL, 0);
 8001644:	f107 0010 	add.w	r0, r7, #16
 8001648:	2300      	movs	r3, #0
 800164a:	9302      	str	r3, [sp, #8]
 800164c:	2300      	movs	r3, #0
 800164e:	9301      	str	r3, [sp, #4]
 8001650:	2300      	movs	r3, #0
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	2300      	movs	r3, #0
 8001656:	2200      	movs	r2, #0
 8001658:	2100      	movs	r1, #0
 800165a:	f7ff ff9d 	bl	8001598 <Xoodyak_Initialize>
    Xoodyak_Absorb(&instance, in, (size_t)inlen);
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	f107 0310 	add.w	r3, r7, #16
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff ffc2 	bl	80015f0 <Xoodyak_Absorb>
    Xoodyak_Squeeze(&instance, out, crypto_hash_BYTES);
 800166c:	f107 0310 	add.w	r3, r7, #16
 8001670:	2220      	movs	r2, #32
 8001672:	68f9      	ldr	r1, [r7, #12]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ffce 	bl	8001616 <Xoodyak_Squeeze>
            printf("\\x%02x", out[i] );
        }
        printf("\n");
    }
    #endif
    return 0;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3750      	adds	r7, #80	; 0x50
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <HAL_Init+0x28>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a07      	ldr	r2, [pc, #28]	; (80016ac <HAL_Init+0x28>)
 800168e:	f043 0310 	orr.w	r3, r3, #16
 8001692:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001694:	2003      	movs	r0, #3
 8001696:	f000 f90d 	bl	80018b4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800169a:	2000      	movs	r0, #0
 800169c:	f000 f808 	bl	80016b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a0:	f7ff f9e2 	bl	8000a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40022000 	.word	0x40022000

080016b0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_InitTick+0x54>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_InitTick+0x58>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 f917 	bl	8001902 <HAL_SYSTICK_Config>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e00e      	b.n	80016fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b0f      	cmp	r3, #15
 80016e2:	d80a      	bhi.n	80016fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e4:	2200      	movs	r2, #0
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f000 f8ed 	bl	80018ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f0:	4a06      	ldr	r2, [pc, #24]	; (800170c <HAL_InitTick+0x5c>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e000      	b.n	80016fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000080 	.word	0x20000080
 8001708:	20000088 	.word	0x20000088
 800170c:	20000084 	.word	0x20000084

08001710 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_IncTick+0x20>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_IncTick+0x24>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4413      	add	r3, r2
 8001720:	4a04      	ldr	r2, [pc, #16]	; (8001734 <HAL_IncTick+0x24>)
 8001722:	6013      	str	r3, [r2, #0]
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000088 	.word	0x20000088
 8001734:	200003b4 	.word	0x200003b4

08001738 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return uwTick;  
 800173c:	4b03      	ldr	r3, [pc, #12]	; (800174c <HAL_GetTick+0x14>)
 800173e:	681b      	ldr	r3, [r3, #0]
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	200003b4 	.word	0x200003b4

08001750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <__NVIC_SetPriorityGrouping+0x44>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800176c:	4013      	ands	r3, r2
 800176e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001778:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800177c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001782:	4a04      	ldr	r2, [pc, #16]	; (8001794 <__NVIC_SetPriorityGrouping+0x44>)
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	60d3      	str	r3, [r2, #12]
}
 8001788:	bf00      	nop
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800179c:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <__NVIC_GetPriorityGrouping+0x18>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	0a1b      	lsrs	r3, r3, #8
 80017a2:	f003 0307 	and.w	r3, r3, #7
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	6039      	str	r1, [r7, #0]
 80017be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	db0a      	blt.n	80017de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	490c      	ldr	r1, [pc, #48]	; (8001800 <__NVIC_SetPriority+0x4c>)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	0112      	lsls	r2, r2, #4
 80017d4:	b2d2      	uxtb	r2, r2
 80017d6:	440b      	add	r3, r1
 80017d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017dc:	e00a      	b.n	80017f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	4908      	ldr	r1, [pc, #32]	; (8001804 <__NVIC_SetPriority+0x50>)
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	f003 030f 	and.w	r3, r3, #15
 80017ea:	3b04      	subs	r3, #4
 80017ec:	0112      	lsls	r2, r2, #4
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	440b      	add	r3, r1
 80017f2:	761a      	strb	r2, [r3, #24]
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000e100 	.word	0xe000e100
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001808:	b480      	push	{r7}
 800180a:	b089      	sub	sp, #36	; 0x24
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f1c3 0307 	rsb	r3, r3, #7
 8001822:	2b04      	cmp	r3, #4
 8001824:	bf28      	it	cs
 8001826:	2304      	movcs	r3, #4
 8001828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3304      	adds	r3, #4
 800182e:	2b06      	cmp	r3, #6
 8001830:	d902      	bls.n	8001838 <NVIC_EncodePriority+0x30>
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	3b03      	subs	r3, #3
 8001836:	e000      	b.n	800183a <NVIC_EncodePriority+0x32>
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800183c:	f04f 32ff 	mov.w	r2, #4294967295
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43da      	mvns	r2, r3
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	401a      	ands	r2, r3
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001850:	f04f 31ff 	mov.w	r1, #4294967295
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	fa01 f303 	lsl.w	r3, r1, r3
 800185a:	43d9      	mvns	r1, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001860:	4313      	orrs	r3, r2
         );
}
 8001862:	4618      	mov	r0, r3
 8001864:	3724      	adds	r7, #36	; 0x24
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
	...

08001870 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3b01      	subs	r3, #1
 800187c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001880:	d301      	bcc.n	8001886 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001882:	2301      	movs	r3, #1
 8001884:	e00f      	b.n	80018a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <SysTick_Config+0x40>)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3b01      	subs	r3, #1
 800188c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800188e:	210f      	movs	r1, #15
 8001890:	f04f 30ff 	mov.w	r0, #4294967295
 8001894:	f7ff ff8e 	bl	80017b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <SysTick_Config+0x40>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800189e:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <SysTick_Config+0x40>)
 80018a0:	2207      	movs	r2, #7
 80018a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	e000e010 	.word	0xe000e010

080018b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff ff47 	bl	8001750 <__NVIC_SetPriorityGrouping>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b086      	sub	sp, #24
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
 80018d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018dc:	f7ff ff5c 	bl	8001798 <__NVIC_GetPriorityGrouping>
 80018e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	68b9      	ldr	r1, [r7, #8]
 80018e6:	6978      	ldr	r0, [r7, #20]
 80018e8:	f7ff ff8e 	bl	8001808 <NVIC_EncodePriority>
 80018ec:	4602      	mov	r2, r0
 80018ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f2:	4611      	mov	r1, r2
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ff5d 	bl	80017b4 <__NVIC_SetPriority>
}
 80018fa:	bf00      	nop
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ffb0 	bl	8001870 <SysTick_Config>
 8001910:	4603      	mov	r3, r0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800191c:	b480      	push	{r7}
 800191e:	b087      	sub	sp, #28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800192a:	e154      	b.n	8001bd6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	2101      	movs	r1, #1
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	fa01 f303 	lsl.w	r3, r1, r3
 8001938:	4013      	ands	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 8146 	beq.w	8001bd0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d00b      	beq.n	8001964 <HAL_GPIO_Init+0x48>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b02      	cmp	r3, #2
 8001952:	d007      	beq.n	8001964 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001958:	2b11      	cmp	r3, #17
 800195a:	d003      	beq.n	8001964 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b12      	cmp	r3, #18
 8001962:	d130      	bne.n	80019c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	2203      	movs	r2, #3
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800199a:	2201      	movs	r2, #1
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	fa02 f303 	lsl.w	r3, r2, r3
 80019a2:	43db      	mvns	r3, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	091b      	lsrs	r3, r3, #4
 80019b0:	f003 0201 	and.w	r2, r3, #1
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	2203      	movs	r2, #3
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0xea>
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b12      	cmp	r3, #18
 8001a04:	d123      	bne.n	8001a4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	08da      	lsrs	r2, r3, #3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3208      	adds	r2, #8
 8001a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	220f      	movs	r2, #15
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4013      	ands	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	691a      	ldr	r2, [r3, #16]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	08da      	lsrs	r2, r3, #3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3208      	adds	r2, #8
 8001a48:	6939      	ldr	r1, [r7, #16]
 8001a4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	2203      	movs	r2, #3
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 0203 	and.w	r2, r3, #3
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 80a0 	beq.w	8001bd0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a90:	4b58      	ldr	r3, [pc, #352]	; (8001bf4 <HAL_GPIO_Init+0x2d8>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	4a57      	ldr	r2, [pc, #348]	; (8001bf4 <HAL_GPIO_Init+0x2d8>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6193      	str	r3, [r2, #24]
 8001a9c:	4b55      	ldr	r3, [pc, #340]	; (8001bf4 <HAL_GPIO_Init+0x2d8>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001aa8:	4a53      	ldr	r2, [pc, #332]	; (8001bf8 <HAL_GPIO_Init+0x2dc>)
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	089b      	lsrs	r3, r3, #2
 8001aae:	3302      	adds	r3, #2
 8001ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	220f      	movs	r2, #15
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ad2:	d019      	beq.n	8001b08 <HAL_GPIO_Init+0x1ec>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a49      	ldr	r2, [pc, #292]	; (8001bfc <HAL_GPIO_Init+0x2e0>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d013      	beq.n	8001b04 <HAL_GPIO_Init+0x1e8>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a48      	ldr	r2, [pc, #288]	; (8001c00 <HAL_GPIO_Init+0x2e4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d00d      	beq.n	8001b00 <HAL_GPIO_Init+0x1e4>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a47      	ldr	r2, [pc, #284]	; (8001c04 <HAL_GPIO_Init+0x2e8>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d007      	beq.n	8001afc <HAL_GPIO_Init+0x1e0>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a46      	ldr	r2, [pc, #280]	; (8001c08 <HAL_GPIO_Init+0x2ec>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d101      	bne.n	8001af8 <HAL_GPIO_Init+0x1dc>
 8001af4:	2304      	movs	r3, #4
 8001af6:	e008      	b.n	8001b0a <HAL_GPIO_Init+0x1ee>
 8001af8:	2305      	movs	r3, #5
 8001afa:	e006      	b.n	8001b0a <HAL_GPIO_Init+0x1ee>
 8001afc:	2303      	movs	r3, #3
 8001afe:	e004      	b.n	8001b0a <HAL_GPIO_Init+0x1ee>
 8001b00:	2302      	movs	r3, #2
 8001b02:	e002      	b.n	8001b0a <HAL_GPIO_Init+0x1ee>
 8001b04:	2301      	movs	r3, #1
 8001b06:	e000      	b.n	8001b0a <HAL_GPIO_Init+0x1ee>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	f002 0203 	and.w	r2, r2, #3
 8001b10:	0092      	lsls	r2, r2, #2
 8001b12:	4093      	lsls	r3, r2
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b1a:	4937      	ldr	r1, [pc, #220]	; (8001bf8 <HAL_GPIO_Init+0x2dc>)
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	089b      	lsrs	r3, r3, #2
 8001b20:	3302      	adds	r3, #2
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b28:	4b38      	ldr	r3, [pc, #224]	; (8001c0c <HAL_GPIO_Init+0x2f0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b4c:	4a2f      	ldr	r2, [pc, #188]	; (8001c0c <HAL_GPIO_Init+0x2f0>)
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b52:	4b2e      	ldr	r3, [pc, #184]	; (8001c0c <HAL_GPIO_Init+0x2f0>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b76:	4a25      	ldr	r2, [pc, #148]	; (8001c0c <HAL_GPIO_Init+0x2f0>)
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b7c:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <HAL_GPIO_Init+0x2f0>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ba0:	4a1a      	ldr	r2, [pc, #104]	; (8001c0c <HAL_GPIO_Init+0x2f0>)
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ba6:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <HAL_GPIO_Init+0x2f0>)
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bca:	4a10      	ldr	r2, [pc, #64]	; (8001c0c <HAL_GPIO_Init+0x2f0>)
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f47f aea3 	bne.w	800192c <HAL_GPIO_Init+0x10>
  }
}
 8001be6:	bf00      	nop
 8001be8:	bf00      	nop
 8001bea:	371c      	adds	r7, #28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	40010000 	.word	0x40010000
 8001bfc:	48000400 	.word	0x48000400
 8001c00:	48000800 	.word	0x48000800
 8001c04:	48000c00 	.word	0x48000c00
 8001c08:	48001000 	.word	0x48001000
 8001c0c:	40010400 	.word	0x40010400

08001c10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b08b      	sub	sp, #44	; 0x2c
 8001c14:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001c2a:	4b29      	ldr	r3, [pc, #164]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d002      	beq.n	8001c40 <HAL_RCC_GetSysClockFreq+0x30>
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d003      	beq.n	8001c46 <HAL_RCC_GetSysClockFreq+0x36>
 8001c3e:	e03c      	b.n	8001cba <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c40:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c42:	623b      	str	r3, [r7, #32]
      break;
 8001c44:	e03c      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001c4c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001c50:	60ba      	str	r2, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	fa92 f2a2 	rbit	r2, r2
 8001c58:	607a      	str	r2, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	fab2 f282 	clz	r2, r2
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	40d3      	lsrs	r3, r2
 8001c64:	4a1c      	ldr	r2, [pc, #112]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001c66:	5cd3      	ldrb	r3, [r2, r3]
 8001c68:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001c6a:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	220f      	movs	r2, #15
 8001c74:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	fa92 f2a2 	rbit	r2, r2
 8001c7c:	60fa      	str	r2, [r7, #12]
  return result;
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	fab2 f282 	clz	r2, r2
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	40d3      	lsrs	r3, r2
 8001c88:	4a14      	ldr	r2, [pc, #80]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xcc>)
 8001c8a:	5cd3      	ldrb	r3, [r2, r3]
 8001c8c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d008      	beq.n	8001caa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c98:	4a0e      	ldr	r2, [pc, #56]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	fb02 f303 	mul.w	r3, r2, r3
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca8:	e004      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	4a0c      	ldr	r2, [pc, #48]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001cae:	fb02 f303 	mul.w	r3, r2, r3
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	623b      	str	r3, [r7, #32]
      break;
 8001cb8:	e002      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001cbc:	623b      	str	r3, [r7, #32]
      break;
 8001cbe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cc0:	6a3b      	ldr	r3, [r7, #32]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	372c      	adds	r7, #44	; 0x2c
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	007a1200 	.word	0x007a1200
 8001cd8:	08003dac 	.word	0x08003dac
 8001cdc:	08003dbc 	.word	0x08003dbc
 8001ce0:	003d0900 	.word	0x003d0900

08001ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cea:	681b      	ldr	r3, [r3, #0]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000080 	.word	0x20000080

08001cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001d02:	f7ff ffef 	bl	8001ce4 <HAL_RCC_GetHCLKFreq>
 8001d06:	4601      	mov	r1, r0
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d10:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001d14:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	fa92 f2a2 	rbit	r2, r2
 8001d1c:	603a      	str	r2, [r7, #0]
  return result;
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	fab2 f282 	clz	r2, r2
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	40d3      	lsrs	r3, r2
 8001d28:	4a04      	ldr	r2, [pc, #16]	; (8001d3c <HAL_RCC_GetPCLK1Freq+0x40>)
 8001d2a:	5cd3      	ldrb	r3, [r2, r3]
 8001d2c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	08003d2c 	.word	0x08003d2c

08001d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001d46:	f7ff ffcd 	bl	8001ce4 <HAL_RCC_GetHCLKFreq>
 8001d4a:	4601      	mov	r1, r0
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001d54:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001d58:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	fa92 f2a2 	rbit	r2, r2
 8001d60:	603a      	str	r2, [r7, #0]
  return result;
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	fab2 f282 	clz	r2, r2
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	40d3      	lsrs	r3, r2
 8001d6c:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001d6e:	5cd3      	ldrb	r3, [r2, r3]
 8001d70:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	08003d2c 	.word	0x08003d2c

08001d84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e040      	b.n	8001e18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d106      	bne.n	8001dac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7fe fe82 	bl	8000ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2224      	movs	r2, #36	; 0x24
 8001db0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 0201 	bic.w	r2, r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f8c0 	bl	8001f48 <UART_SetConfig>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d101      	bne.n	8001dd2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e022      	b.n	8001e18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d002      	beq.n	8001de0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 fa88 	bl	80022f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001dee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001dfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0201 	orr.w	r2, r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 fb0f 	bl	8002434 <UART_CheckIdleState>
 8001e16:	4603      	mov	r3, r0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af02      	add	r7, sp, #8
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e34:	2b20      	cmp	r3, #32
 8001e36:	f040 8082 	bne.w	8001f3e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d002      	beq.n	8001e46 <HAL_UART_Transmit+0x26>
 8001e40:	88fb      	ldrh	r3, [r7, #6]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e07a      	b.n	8001f40 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <HAL_UART_Transmit+0x38>
 8001e54:	2302      	movs	r3, #2
 8001e56:	e073      	b.n	8001f40 <HAL_UART_Transmit+0x120>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2221      	movs	r2, #33	; 0x21
 8001e6c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e6e:	f7ff fc63 	bl	8001738 <HAL_GetTick>
 8001e72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	88fa      	ldrh	r2, [r7, #6]
 8001e78:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	88fa      	ldrh	r2, [r7, #6]
 8001e80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e8c:	d108      	bne.n	8001ea0 <HAL_UART_Transmit+0x80>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d104      	bne.n	8001ea0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	61bb      	str	r3, [r7, #24]
 8001e9e:	e003      	b.n	8001ea8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8001eb0:	e02d      	b.n	8001f0e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2180      	movs	r1, #128	; 0x80
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 fb02 	bl	80024c6 <UART_WaitOnFlagUntilTimeout>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e039      	b.n	8001f40 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10b      	bne.n	8001eea <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	881a      	ldrh	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ede:	b292      	uxth	r2, r2
 8001ee0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	61bb      	str	r3, [r7, #24]
 8001ee8:	e008      	b.n	8001efc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	781a      	ldrb	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	b292      	uxth	r2, r2
 8001ef4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1cb      	bne.n	8001eb2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2200      	movs	r2, #0
 8001f22:	2140      	movs	r1, #64	; 0x40
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f000 face 	bl	80024c6 <UART_WaitOnFlagUntilTimeout>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e005      	b.n	8001f40 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2220      	movs	r2, #32
 8001f38:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e000      	b.n	8001f40 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8001f3e:	2302      	movs	r3, #2
  }
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3720      	adds	r7, #32
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001f76:	f023 030c 	bic.w	r3, r3, #12
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6812      	ldr	r2, [r2, #0]
 8001f7e:	6979      	ldr	r1, [r7, #20]
 8001f80:	430b      	orrs	r3, r1
 8001f82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4aae      	ldr	r2, [pc, #696]	; (800227c <UART_SetConfig+0x334>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d120      	bne.n	800200a <UART_SetConfig+0xc2>
 8001fc8:	4bad      	ldr	r3, [pc, #692]	; (8002280 <UART_SetConfig+0x338>)
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d817      	bhi.n	8002004 <UART_SetConfig+0xbc>
 8001fd4:	a201      	add	r2, pc, #4	; (adr r2, 8001fdc <UART_SetConfig+0x94>)
 8001fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fda:	bf00      	nop
 8001fdc:	08001fed 	.word	0x08001fed
 8001fe0:	08001ff9 	.word	0x08001ff9
 8001fe4:	08001fff 	.word	0x08001fff
 8001fe8:	08001ff3 	.word	0x08001ff3
 8001fec:	2301      	movs	r3, #1
 8001fee:	77fb      	strb	r3, [r7, #31]
 8001ff0:	e0b5      	b.n	800215e <UART_SetConfig+0x216>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	77fb      	strb	r3, [r7, #31]
 8001ff6:	e0b2      	b.n	800215e <UART_SetConfig+0x216>
 8001ff8:	2304      	movs	r3, #4
 8001ffa:	77fb      	strb	r3, [r7, #31]
 8001ffc:	e0af      	b.n	800215e <UART_SetConfig+0x216>
 8001ffe:	2308      	movs	r3, #8
 8002000:	77fb      	strb	r3, [r7, #31]
 8002002:	e0ac      	b.n	800215e <UART_SetConfig+0x216>
 8002004:	2310      	movs	r3, #16
 8002006:	77fb      	strb	r3, [r7, #31]
 8002008:	e0a9      	b.n	800215e <UART_SetConfig+0x216>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a9d      	ldr	r2, [pc, #628]	; (8002284 <UART_SetConfig+0x33c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d124      	bne.n	800205e <UART_SetConfig+0x116>
 8002014:	4b9a      	ldr	r3, [pc, #616]	; (8002280 <UART_SetConfig+0x338>)
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800201c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002020:	d011      	beq.n	8002046 <UART_SetConfig+0xfe>
 8002022:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002026:	d817      	bhi.n	8002058 <UART_SetConfig+0x110>
 8002028:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800202c:	d011      	beq.n	8002052 <UART_SetConfig+0x10a>
 800202e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002032:	d811      	bhi.n	8002058 <UART_SetConfig+0x110>
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <UART_SetConfig+0xf8>
 8002038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800203c:	d006      	beq.n	800204c <UART_SetConfig+0x104>
 800203e:	e00b      	b.n	8002058 <UART_SetConfig+0x110>
 8002040:	2300      	movs	r3, #0
 8002042:	77fb      	strb	r3, [r7, #31]
 8002044:	e08b      	b.n	800215e <UART_SetConfig+0x216>
 8002046:	2302      	movs	r3, #2
 8002048:	77fb      	strb	r3, [r7, #31]
 800204a:	e088      	b.n	800215e <UART_SetConfig+0x216>
 800204c:	2304      	movs	r3, #4
 800204e:	77fb      	strb	r3, [r7, #31]
 8002050:	e085      	b.n	800215e <UART_SetConfig+0x216>
 8002052:	2308      	movs	r3, #8
 8002054:	77fb      	strb	r3, [r7, #31]
 8002056:	e082      	b.n	800215e <UART_SetConfig+0x216>
 8002058:	2310      	movs	r3, #16
 800205a:	77fb      	strb	r3, [r7, #31]
 800205c:	e07f      	b.n	800215e <UART_SetConfig+0x216>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a89      	ldr	r2, [pc, #548]	; (8002288 <UART_SetConfig+0x340>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d124      	bne.n	80020b2 <UART_SetConfig+0x16a>
 8002068:	4b85      	ldr	r3, [pc, #532]	; (8002280 <UART_SetConfig+0x338>)
 800206a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002070:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002074:	d011      	beq.n	800209a <UART_SetConfig+0x152>
 8002076:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800207a:	d817      	bhi.n	80020ac <UART_SetConfig+0x164>
 800207c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002080:	d011      	beq.n	80020a6 <UART_SetConfig+0x15e>
 8002082:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002086:	d811      	bhi.n	80020ac <UART_SetConfig+0x164>
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <UART_SetConfig+0x14c>
 800208c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002090:	d006      	beq.n	80020a0 <UART_SetConfig+0x158>
 8002092:	e00b      	b.n	80020ac <UART_SetConfig+0x164>
 8002094:	2300      	movs	r3, #0
 8002096:	77fb      	strb	r3, [r7, #31]
 8002098:	e061      	b.n	800215e <UART_SetConfig+0x216>
 800209a:	2302      	movs	r3, #2
 800209c:	77fb      	strb	r3, [r7, #31]
 800209e:	e05e      	b.n	800215e <UART_SetConfig+0x216>
 80020a0:	2304      	movs	r3, #4
 80020a2:	77fb      	strb	r3, [r7, #31]
 80020a4:	e05b      	b.n	800215e <UART_SetConfig+0x216>
 80020a6:	2308      	movs	r3, #8
 80020a8:	77fb      	strb	r3, [r7, #31]
 80020aa:	e058      	b.n	800215e <UART_SetConfig+0x216>
 80020ac:	2310      	movs	r3, #16
 80020ae:	77fb      	strb	r3, [r7, #31]
 80020b0:	e055      	b.n	800215e <UART_SetConfig+0x216>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a75      	ldr	r2, [pc, #468]	; (800228c <UART_SetConfig+0x344>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d124      	bne.n	8002106 <UART_SetConfig+0x1be>
 80020bc:	4b70      	ldr	r3, [pc, #448]	; (8002280 <UART_SetConfig+0x338>)
 80020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80020c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80020c8:	d011      	beq.n	80020ee <UART_SetConfig+0x1a6>
 80020ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80020ce:	d817      	bhi.n	8002100 <UART_SetConfig+0x1b8>
 80020d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020d4:	d011      	beq.n	80020fa <UART_SetConfig+0x1b2>
 80020d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020da:	d811      	bhi.n	8002100 <UART_SetConfig+0x1b8>
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <UART_SetConfig+0x1a0>
 80020e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020e4:	d006      	beq.n	80020f4 <UART_SetConfig+0x1ac>
 80020e6:	e00b      	b.n	8002100 <UART_SetConfig+0x1b8>
 80020e8:	2300      	movs	r3, #0
 80020ea:	77fb      	strb	r3, [r7, #31]
 80020ec:	e037      	b.n	800215e <UART_SetConfig+0x216>
 80020ee:	2302      	movs	r3, #2
 80020f0:	77fb      	strb	r3, [r7, #31]
 80020f2:	e034      	b.n	800215e <UART_SetConfig+0x216>
 80020f4:	2304      	movs	r3, #4
 80020f6:	77fb      	strb	r3, [r7, #31]
 80020f8:	e031      	b.n	800215e <UART_SetConfig+0x216>
 80020fa:	2308      	movs	r3, #8
 80020fc:	77fb      	strb	r3, [r7, #31]
 80020fe:	e02e      	b.n	800215e <UART_SetConfig+0x216>
 8002100:	2310      	movs	r3, #16
 8002102:	77fb      	strb	r3, [r7, #31]
 8002104:	e02b      	b.n	800215e <UART_SetConfig+0x216>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a61      	ldr	r2, [pc, #388]	; (8002290 <UART_SetConfig+0x348>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d124      	bne.n	800215a <UART_SetConfig+0x212>
 8002110:	4b5b      	ldr	r3, [pc, #364]	; (8002280 <UART_SetConfig+0x338>)
 8002112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002114:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002118:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800211c:	d011      	beq.n	8002142 <UART_SetConfig+0x1fa>
 800211e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002122:	d817      	bhi.n	8002154 <UART_SetConfig+0x20c>
 8002124:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002128:	d011      	beq.n	800214e <UART_SetConfig+0x206>
 800212a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800212e:	d811      	bhi.n	8002154 <UART_SetConfig+0x20c>
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <UART_SetConfig+0x1f4>
 8002134:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002138:	d006      	beq.n	8002148 <UART_SetConfig+0x200>
 800213a:	e00b      	b.n	8002154 <UART_SetConfig+0x20c>
 800213c:	2300      	movs	r3, #0
 800213e:	77fb      	strb	r3, [r7, #31]
 8002140:	e00d      	b.n	800215e <UART_SetConfig+0x216>
 8002142:	2302      	movs	r3, #2
 8002144:	77fb      	strb	r3, [r7, #31]
 8002146:	e00a      	b.n	800215e <UART_SetConfig+0x216>
 8002148:	2304      	movs	r3, #4
 800214a:	77fb      	strb	r3, [r7, #31]
 800214c:	e007      	b.n	800215e <UART_SetConfig+0x216>
 800214e:	2308      	movs	r3, #8
 8002150:	77fb      	strb	r3, [r7, #31]
 8002152:	e004      	b.n	800215e <UART_SetConfig+0x216>
 8002154:	2310      	movs	r3, #16
 8002156:	77fb      	strb	r3, [r7, #31]
 8002158:	e001      	b.n	800215e <UART_SetConfig+0x216>
 800215a:	2310      	movs	r3, #16
 800215c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002166:	d15c      	bne.n	8002222 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8002168:	7ffb      	ldrb	r3, [r7, #31]
 800216a:	2b08      	cmp	r3, #8
 800216c:	d827      	bhi.n	80021be <UART_SetConfig+0x276>
 800216e:	a201      	add	r2, pc, #4	; (adr r2, 8002174 <UART_SetConfig+0x22c>)
 8002170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002174:	08002199 	.word	0x08002199
 8002178:	080021a1 	.word	0x080021a1
 800217c:	080021a9 	.word	0x080021a9
 8002180:	080021bf 	.word	0x080021bf
 8002184:	080021af 	.word	0x080021af
 8002188:	080021bf 	.word	0x080021bf
 800218c:	080021bf 	.word	0x080021bf
 8002190:	080021bf 	.word	0x080021bf
 8002194:	080021b7 	.word	0x080021b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002198:	f7ff fdb0 	bl	8001cfc <HAL_RCC_GetPCLK1Freq>
 800219c:	61b8      	str	r0, [r7, #24]
        break;
 800219e:	e013      	b.n	80021c8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80021a0:	f7ff fdce 	bl	8001d40 <HAL_RCC_GetPCLK2Freq>
 80021a4:	61b8      	str	r0, [r7, #24]
        break;
 80021a6:	e00f      	b.n	80021c8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80021a8:	4b3a      	ldr	r3, [pc, #232]	; (8002294 <UART_SetConfig+0x34c>)
 80021aa:	61bb      	str	r3, [r7, #24]
        break;
 80021ac:	e00c      	b.n	80021c8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80021ae:	f7ff fd2f 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 80021b2:	61b8      	str	r0, [r7, #24]
        break;
 80021b4:	e008      	b.n	80021c8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80021b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021ba:	61bb      	str	r3, [r7, #24]
        break;
 80021bc:	e004      	b.n	80021c8 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	77bb      	strb	r3, [r7, #30]
        break;
 80021c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 8085 	beq.w	80022da <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	005a      	lsls	r2, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	085b      	lsrs	r3, r3, #1
 80021da:	441a      	add	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	2b0f      	cmp	r3, #15
 80021ec:	d916      	bls.n	800221c <UART_SetConfig+0x2d4>
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f4:	d212      	bcs.n	800221c <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	f023 030f 	bic.w	r3, r3, #15
 80021fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	085b      	lsrs	r3, r3, #1
 8002204:	b29b      	uxth	r3, r3
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	b29a      	uxth	r2, r3
 800220c:	89fb      	ldrh	r3, [r7, #14]
 800220e:	4313      	orrs	r3, r2
 8002210:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	89fa      	ldrh	r2, [r7, #14]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	e05e      	b.n	80022da <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	77bb      	strb	r3, [r7, #30]
 8002220:	e05b      	b.n	80022da <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002222:	7ffb      	ldrb	r3, [r7, #31]
 8002224:	2b08      	cmp	r3, #8
 8002226:	d837      	bhi.n	8002298 <UART_SetConfig+0x350>
 8002228:	a201      	add	r2, pc, #4	; (adr r2, 8002230 <UART_SetConfig+0x2e8>)
 800222a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222e:	bf00      	nop
 8002230:	08002255 	.word	0x08002255
 8002234:	0800225d 	.word	0x0800225d
 8002238:	08002265 	.word	0x08002265
 800223c:	08002299 	.word	0x08002299
 8002240:	0800226b 	.word	0x0800226b
 8002244:	08002299 	.word	0x08002299
 8002248:	08002299 	.word	0x08002299
 800224c:	08002299 	.word	0x08002299
 8002250:	08002273 	.word	0x08002273
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002254:	f7ff fd52 	bl	8001cfc <HAL_RCC_GetPCLK1Freq>
 8002258:	61b8      	str	r0, [r7, #24]
        break;
 800225a:	e022      	b.n	80022a2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800225c:	f7ff fd70 	bl	8001d40 <HAL_RCC_GetPCLK2Freq>
 8002260:	61b8      	str	r0, [r7, #24]
        break;
 8002262:	e01e      	b.n	80022a2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <UART_SetConfig+0x34c>)
 8002266:	61bb      	str	r3, [r7, #24]
        break;
 8002268:	e01b      	b.n	80022a2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800226a:	f7ff fcd1 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 800226e:	61b8      	str	r0, [r7, #24]
        break;
 8002270:	e017      	b.n	80022a2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002276:	61bb      	str	r3, [r7, #24]
        break;
 8002278:	e013      	b.n	80022a2 <UART_SetConfig+0x35a>
 800227a:	bf00      	nop
 800227c:	40013800 	.word	0x40013800
 8002280:	40021000 	.word	0x40021000
 8002284:	40004400 	.word	0x40004400
 8002288:	40004800 	.word	0x40004800
 800228c:	40004c00 	.word	0x40004c00
 8002290:	40005000 	.word	0x40005000
 8002294:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	77bb      	strb	r3, [r7, #30]
        break;
 80022a0:	bf00      	nop
    }

    if (pclk != 0U)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d018      	beq.n	80022da <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	085a      	lsrs	r2, r3, #1
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	441a      	add	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	2b0f      	cmp	r3, #15
 80022c2:	d908      	bls.n	80022d6 <UART_SetConfig+0x38e>
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ca:	d204      	bcs.n	80022d6 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	60da      	str	r2, [r3, #12]
 80022d4:	e001      	b.n	80022da <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80022e6:	7fbb      	ldrb	r3, [r7, #30]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3720      	adds	r7, #32
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00a      	beq.n	800231a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00a      	beq.n	800233c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00a      	beq.n	800235e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00a      	beq.n	8002380 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00a      	beq.n	80023a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	f003 0320 	and.w	r3, r3, #32
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00a      	beq.n	80023c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d01a      	beq.n	8002406 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023ee:	d10a      	bne.n	8002406 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	605a      	str	r2, [r3, #4]
  }
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af02      	add	r7, sp, #8
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002444:	f7ff f978 	bl	8001738 <HAL_GetTick>
 8002448:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b08      	cmp	r3, #8
 8002456:	d10e      	bne.n	8002476 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002458:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f82d 	bl	80024c6 <UART_WaitOnFlagUntilTimeout>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e023      	b.n	80024be <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b04      	cmp	r3, #4
 8002482:	d10e      	bne.n	80024a2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002484:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f817 	bl	80024c6 <UART_WaitOnFlagUntilTimeout>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e00d      	b.n	80024be <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2220      	movs	r2, #32
 80024a6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2220      	movs	r2, #32
 80024ac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b084      	sub	sp, #16
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	60f8      	str	r0, [r7, #12]
 80024ce:	60b9      	str	r1, [r7, #8]
 80024d0:	603b      	str	r3, [r7, #0]
 80024d2:	4613      	mov	r3, r2
 80024d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024d6:	e05e      	b.n	8002596 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024de:	d05a      	beq.n	8002596 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e0:	f7ff f92a 	bl	8001738 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d302      	bcc.n	80024f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d11b      	bne.n	800252e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002504:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0201 	bic.w	r2, r2, #1
 8002514:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2220      	movs	r2, #32
 800251a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2220      	movs	r2, #32
 8002520:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e043      	b.n	80025b6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	d02c      	beq.n	8002596 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800254a:	d124      	bne.n	8002596 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002554:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002564:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0201 	bic.w	r2, r2, #1
 8002574:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2220      	movs	r2, #32
 800257a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2220      	movs	r2, #32
 8002580:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2220      	movs	r2, #32
 8002586:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e00f      	b.n	80025b6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	69da      	ldr	r2, [r3, #28]
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	4013      	ands	r3, r2
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	bf0c      	ite	eq
 80025a6:	2301      	moveq	r3, #1
 80025a8:	2300      	movne	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d091      	beq.n	80024d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <LL_TIM_SetPrescaler>:
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <LL_TIM_SetAutoReload>:
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
 80025e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <LL_TIM_SetRepetitionCounter>:
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	f043 0201 	orr.w	r2, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	615a      	str	r2, [r3, #20]
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
	...

08002634 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a39      	ldr	r2, [pc, #228]	; (800272c <LL_TIM_Init+0xf8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d00f      	beq.n	800266c <LL_TIM_Init+0x38>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002652:	d00b      	beq.n	800266c <LL_TIM_Init+0x38>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a36      	ldr	r2, [pc, #216]	; (8002730 <LL_TIM_Init+0xfc>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d007      	beq.n	800266c <LL_TIM_Init+0x38>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a35      	ldr	r2, [pc, #212]	; (8002734 <LL_TIM_Init+0x100>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d003      	beq.n	800266c <LL_TIM_Init+0x38>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a34      	ldr	r2, [pc, #208]	; (8002738 <LL_TIM_Init+0x104>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d106      	bne.n	800267a <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	4313      	orrs	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a2b      	ldr	r2, [pc, #172]	; (800272c <LL_TIM_Init+0xf8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d01b      	beq.n	80026ba <LL_TIM_Init+0x86>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002688:	d017      	beq.n	80026ba <LL_TIM_Init+0x86>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a28      	ldr	r2, [pc, #160]	; (8002730 <LL_TIM_Init+0xfc>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d013      	beq.n	80026ba <LL_TIM_Init+0x86>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a27      	ldr	r2, [pc, #156]	; (8002734 <LL_TIM_Init+0x100>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d00f      	beq.n	80026ba <LL_TIM_Init+0x86>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a26      	ldr	r2, [pc, #152]	; (8002738 <LL_TIM_Init+0x104>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d00b      	beq.n	80026ba <LL_TIM_Init+0x86>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a25      	ldr	r2, [pc, #148]	; (800273c <LL_TIM_Init+0x108>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d007      	beq.n	80026ba <LL_TIM_Init+0x86>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a24      	ldr	r2, [pc, #144]	; (8002740 <LL_TIM_Init+0x10c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d003      	beq.n	80026ba <LL_TIM_Init+0x86>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a23      	ldr	r2, [pc, #140]	; (8002744 <LL_TIM_Init+0x110>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d106      	bne.n	80026c8 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	4619      	mov	r1, r3
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f7ff ff80 	bl	80025da <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	4619      	mov	r1, r3
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff ff6c 	bl	80025be <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a10      	ldr	r2, [pc, #64]	; (800272c <LL_TIM_Init+0xf8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d00f      	beq.n	800270e <LL_TIM_Init+0xda>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a11      	ldr	r2, [pc, #68]	; (8002738 <LL_TIM_Init+0x104>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d00b      	beq.n	800270e <LL_TIM_Init+0xda>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a10      	ldr	r2, [pc, #64]	; (800273c <LL_TIM_Init+0x108>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d007      	beq.n	800270e <LL_TIM_Init+0xda>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a0f      	ldr	r2, [pc, #60]	; (8002740 <LL_TIM_Init+0x10c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d003      	beq.n	800270e <LL_TIM_Init+0xda>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a0e      	ldr	r2, [pc, #56]	; (8002744 <LL_TIM_Init+0x110>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d105      	bne.n	800271a <LL_TIM_Init+0xe6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	4619      	mov	r1, r3
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff ff6e 	bl	80025f6 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff ff79 	bl	8002612 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40012c00 	.word	0x40012c00
 8002730:	40000400 	.word	0x40000400
 8002734:	40000800 	.word	0x40000800
 8002738:	40013400 	.word	0x40013400
 800273c:	40014000 	.word	0x40014000
 8002740:	40014400 	.word	0x40014400
 8002744:	40014800 	.word	0x40014800

08002748 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002750:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <LL_mDelay+0x48>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002756:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275e:	d00c      	beq.n	800277a <LL_mDelay+0x32>
  {
    Delay++;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3301      	adds	r3, #1
 8002764:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002766:	e008      	b.n	800277a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002768:	4b09      	ldr	r3, [pc, #36]	; (8002790 <LL_mDelay+0x48>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <LL_mDelay+0x32>
    {
      Delay--;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3b01      	subs	r3, #1
 8002778:	607b      	str	r3, [r7, #4]
  while (Delay)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1f3      	bne.n	8002768 <LL_mDelay+0x20>
    }
  }
}
 8002780:	bf00      	nop
 8002782:	bf00      	nop
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	e000e010 	.word	0xe000e010

08002794 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800279c:	4a04      	ldr	r2, [pc, #16]	; (80027b0 <LL_SetSystemCoreClock+0x1c>)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6013      	str	r3, [r2, #0]
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	20000080 	.word	0x20000080

080027b4 <__assert_func>:
 80027b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80027b6:	4614      	mov	r4, r2
 80027b8:	461a      	mov	r2, r3
 80027ba:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <__assert_func+0x2c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4605      	mov	r5, r0
 80027c0:	68d8      	ldr	r0, [r3, #12]
 80027c2:	b14c      	cbz	r4, 80027d8 <__assert_func+0x24>
 80027c4:	4b07      	ldr	r3, [pc, #28]	; (80027e4 <__assert_func+0x30>)
 80027c6:	9100      	str	r1, [sp, #0]
 80027c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80027cc:	4906      	ldr	r1, [pc, #24]	; (80027e8 <__assert_func+0x34>)
 80027ce:	462b      	mov	r3, r5
 80027d0:	f000 f814 	bl	80027fc <fiprintf>
 80027d4:	f000 fc2c 	bl	8003030 <abort>
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <__assert_func+0x38>)
 80027da:	461c      	mov	r4, r3
 80027dc:	e7f3      	b.n	80027c6 <__assert_func+0x12>
 80027de:	bf00      	nop
 80027e0:	2000008c 	.word	0x2000008c
 80027e4:	08003dcc 	.word	0x08003dcc
 80027e8:	08003dd9 	.word	0x08003dd9
 80027ec:	08003e07 	.word	0x08003e07

080027f0 <__errno>:
 80027f0:	4b01      	ldr	r3, [pc, #4]	; (80027f8 <__errno+0x8>)
 80027f2:	6818      	ldr	r0, [r3, #0]
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	2000008c 	.word	0x2000008c

080027fc <fiprintf>:
 80027fc:	b40e      	push	{r1, r2, r3}
 80027fe:	b503      	push	{r0, r1, lr}
 8002800:	4601      	mov	r1, r0
 8002802:	ab03      	add	r3, sp, #12
 8002804:	4805      	ldr	r0, [pc, #20]	; (800281c <fiprintf+0x20>)
 8002806:	f853 2b04 	ldr.w	r2, [r3], #4
 800280a:	6800      	ldr	r0, [r0, #0]
 800280c:	9301      	str	r3, [sp, #4]
 800280e:	f000 f86b 	bl	80028e8 <_vfiprintf_r>
 8002812:	b002      	add	sp, #8
 8002814:	f85d eb04 	ldr.w	lr, [sp], #4
 8002818:	b003      	add	sp, #12
 800281a:	4770      	bx	lr
 800281c:	2000008c 	.word	0x2000008c

08002820 <__libc_init_array>:
 8002820:	b570      	push	{r4, r5, r6, lr}
 8002822:	4d0d      	ldr	r5, [pc, #52]	; (8002858 <__libc_init_array+0x38>)
 8002824:	4c0d      	ldr	r4, [pc, #52]	; (800285c <__libc_init_array+0x3c>)
 8002826:	1b64      	subs	r4, r4, r5
 8002828:	10a4      	asrs	r4, r4, #2
 800282a:	2600      	movs	r6, #0
 800282c:	42a6      	cmp	r6, r4
 800282e:	d109      	bne.n	8002844 <__libc_init_array+0x24>
 8002830:	4d0b      	ldr	r5, [pc, #44]	; (8002860 <__libc_init_array+0x40>)
 8002832:	4c0c      	ldr	r4, [pc, #48]	; (8002864 <__libc_init_array+0x44>)
 8002834:	f001 f97c 	bl	8003b30 <_init>
 8002838:	1b64      	subs	r4, r4, r5
 800283a:	10a4      	asrs	r4, r4, #2
 800283c:	2600      	movs	r6, #0
 800283e:	42a6      	cmp	r6, r4
 8002840:	d105      	bne.n	800284e <__libc_init_array+0x2e>
 8002842:	bd70      	pop	{r4, r5, r6, pc}
 8002844:	f855 3b04 	ldr.w	r3, [r5], #4
 8002848:	4798      	blx	r3
 800284a:	3601      	adds	r6, #1
 800284c:	e7ee      	b.n	800282c <__libc_init_array+0xc>
 800284e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002852:	4798      	blx	r3
 8002854:	3601      	adds	r6, #1
 8002856:	e7f2      	b.n	800283e <__libc_init_array+0x1e>
 8002858:	08003ea0 	.word	0x08003ea0
 800285c:	08003ea0 	.word	0x08003ea0
 8002860:	08003ea0 	.word	0x08003ea0
 8002864:	08003ea4 	.word	0x08003ea4

08002868 <memcpy>:
 8002868:	440a      	add	r2, r1
 800286a:	4291      	cmp	r1, r2
 800286c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002870:	d100      	bne.n	8002874 <memcpy+0xc>
 8002872:	4770      	bx	lr
 8002874:	b510      	push	{r4, lr}
 8002876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800287a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800287e:	4291      	cmp	r1, r2
 8002880:	d1f9      	bne.n	8002876 <memcpy+0xe>
 8002882:	bd10      	pop	{r4, pc}

08002884 <memset>:
 8002884:	4402      	add	r2, r0
 8002886:	4603      	mov	r3, r0
 8002888:	4293      	cmp	r3, r2
 800288a:	d100      	bne.n	800288e <memset+0xa>
 800288c:	4770      	bx	lr
 800288e:	f803 1b01 	strb.w	r1, [r3], #1
 8002892:	e7f9      	b.n	8002888 <memset+0x4>

08002894 <__sfputc_r>:
 8002894:	6893      	ldr	r3, [r2, #8]
 8002896:	3b01      	subs	r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	b410      	push	{r4}
 800289c:	6093      	str	r3, [r2, #8]
 800289e:	da08      	bge.n	80028b2 <__sfputc_r+0x1e>
 80028a0:	6994      	ldr	r4, [r2, #24]
 80028a2:	42a3      	cmp	r3, r4
 80028a4:	db01      	blt.n	80028aa <__sfputc_r+0x16>
 80028a6:	290a      	cmp	r1, #10
 80028a8:	d103      	bne.n	80028b2 <__sfputc_r+0x1e>
 80028aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028ae:	f000 baff 	b.w	8002eb0 <__swbuf_r>
 80028b2:	6813      	ldr	r3, [r2, #0]
 80028b4:	1c58      	adds	r0, r3, #1
 80028b6:	6010      	str	r0, [r2, #0]
 80028b8:	7019      	strb	r1, [r3, #0]
 80028ba:	4608      	mov	r0, r1
 80028bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <__sfputs_r>:
 80028c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c4:	4606      	mov	r6, r0
 80028c6:	460f      	mov	r7, r1
 80028c8:	4614      	mov	r4, r2
 80028ca:	18d5      	adds	r5, r2, r3
 80028cc:	42ac      	cmp	r4, r5
 80028ce:	d101      	bne.n	80028d4 <__sfputs_r+0x12>
 80028d0:	2000      	movs	r0, #0
 80028d2:	e007      	b.n	80028e4 <__sfputs_r+0x22>
 80028d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028d8:	463a      	mov	r2, r7
 80028da:	4630      	mov	r0, r6
 80028dc:	f7ff ffda 	bl	8002894 <__sfputc_r>
 80028e0:	1c43      	adds	r3, r0, #1
 80028e2:	d1f3      	bne.n	80028cc <__sfputs_r+0xa>
 80028e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080028e8 <_vfiprintf_r>:
 80028e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028ec:	460d      	mov	r5, r1
 80028ee:	b09d      	sub	sp, #116	; 0x74
 80028f0:	4614      	mov	r4, r2
 80028f2:	4698      	mov	r8, r3
 80028f4:	4606      	mov	r6, r0
 80028f6:	b118      	cbz	r0, 8002900 <_vfiprintf_r+0x18>
 80028f8:	6983      	ldr	r3, [r0, #24]
 80028fa:	b90b      	cbnz	r3, 8002900 <_vfiprintf_r+0x18>
 80028fc:	f000 fcba 	bl	8003274 <__sinit>
 8002900:	4b89      	ldr	r3, [pc, #548]	; (8002b28 <_vfiprintf_r+0x240>)
 8002902:	429d      	cmp	r5, r3
 8002904:	d11b      	bne.n	800293e <_vfiprintf_r+0x56>
 8002906:	6875      	ldr	r5, [r6, #4]
 8002908:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800290a:	07d9      	lsls	r1, r3, #31
 800290c:	d405      	bmi.n	800291a <_vfiprintf_r+0x32>
 800290e:	89ab      	ldrh	r3, [r5, #12]
 8002910:	059a      	lsls	r2, r3, #22
 8002912:	d402      	bmi.n	800291a <_vfiprintf_r+0x32>
 8002914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002916:	f000 fd4b 	bl	80033b0 <__retarget_lock_acquire_recursive>
 800291a:	89ab      	ldrh	r3, [r5, #12]
 800291c:	071b      	lsls	r3, r3, #28
 800291e:	d501      	bpl.n	8002924 <_vfiprintf_r+0x3c>
 8002920:	692b      	ldr	r3, [r5, #16]
 8002922:	b9eb      	cbnz	r3, 8002960 <_vfiprintf_r+0x78>
 8002924:	4629      	mov	r1, r5
 8002926:	4630      	mov	r0, r6
 8002928:	f000 fb14 	bl	8002f54 <__swsetup_r>
 800292c:	b1c0      	cbz	r0, 8002960 <_vfiprintf_r+0x78>
 800292e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002930:	07dc      	lsls	r4, r3, #31
 8002932:	d50e      	bpl.n	8002952 <_vfiprintf_r+0x6a>
 8002934:	f04f 30ff 	mov.w	r0, #4294967295
 8002938:	b01d      	add	sp, #116	; 0x74
 800293a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800293e:	4b7b      	ldr	r3, [pc, #492]	; (8002b2c <_vfiprintf_r+0x244>)
 8002940:	429d      	cmp	r5, r3
 8002942:	d101      	bne.n	8002948 <_vfiprintf_r+0x60>
 8002944:	68b5      	ldr	r5, [r6, #8]
 8002946:	e7df      	b.n	8002908 <_vfiprintf_r+0x20>
 8002948:	4b79      	ldr	r3, [pc, #484]	; (8002b30 <_vfiprintf_r+0x248>)
 800294a:	429d      	cmp	r5, r3
 800294c:	bf08      	it	eq
 800294e:	68f5      	ldreq	r5, [r6, #12]
 8002950:	e7da      	b.n	8002908 <_vfiprintf_r+0x20>
 8002952:	89ab      	ldrh	r3, [r5, #12]
 8002954:	0598      	lsls	r0, r3, #22
 8002956:	d4ed      	bmi.n	8002934 <_vfiprintf_r+0x4c>
 8002958:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800295a:	f000 fd2a 	bl	80033b2 <__retarget_lock_release_recursive>
 800295e:	e7e9      	b.n	8002934 <_vfiprintf_r+0x4c>
 8002960:	2300      	movs	r3, #0
 8002962:	9309      	str	r3, [sp, #36]	; 0x24
 8002964:	2320      	movs	r3, #32
 8002966:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800296a:	f8cd 800c 	str.w	r8, [sp, #12]
 800296e:	2330      	movs	r3, #48	; 0x30
 8002970:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002b34 <_vfiprintf_r+0x24c>
 8002974:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002978:	f04f 0901 	mov.w	r9, #1
 800297c:	4623      	mov	r3, r4
 800297e:	469a      	mov	sl, r3
 8002980:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002984:	b10a      	cbz	r2, 800298a <_vfiprintf_r+0xa2>
 8002986:	2a25      	cmp	r2, #37	; 0x25
 8002988:	d1f9      	bne.n	800297e <_vfiprintf_r+0x96>
 800298a:	ebba 0b04 	subs.w	fp, sl, r4
 800298e:	d00b      	beq.n	80029a8 <_vfiprintf_r+0xc0>
 8002990:	465b      	mov	r3, fp
 8002992:	4622      	mov	r2, r4
 8002994:	4629      	mov	r1, r5
 8002996:	4630      	mov	r0, r6
 8002998:	f7ff ff93 	bl	80028c2 <__sfputs_r>
 800299c:	3001      	adds	r0, #1
 800299e:	f000 80aa 	beq.w	8002af6 <_vfiprintf_r+0x20e>
 80029a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029a4:	445a      	add	r2, fp
 80029a6:	9209      	str	r2, [sp, #36]	; 0x24
 80029a8:	f89a 3000 	ldrb.w	r3, [sl]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 80a2 	beq.w	8002af6 <_vfiprintf_r+0x20e>
 80029b2:	2300      	movs	r3, #0
 80029b4:	f04f 32ff 	mov.w	r2, #4294967295
 80029b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80029bc:	f10a 0a01 	add.w	sl, sl, #1
 80029c0:	9304      	str	r3, [sp, #16]
 80029c2:	9307      	str	r3, [sp, #28]
 80029c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80029c8:	931a      	str	r3, [sp, #104]	; 0x68
 80029ca:	4654      	mov	r4, sl
 80029cc:	2205      	movs	r2, #5
 80029ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029d2:	4858      	ldr	r0, [pc, #352]	; (8002b34 <_vfiprintf_r+0x24c>)
 80029d4:	f7fd fc04 	bl	80001e0 <memchr>
 80029d8:	9a04      	ldr	r2, [sp, #16]
 80029da:	b9d8      	cbnz	r0, 8002a14 <_vfiprintf_r+0x12c>
 80029dc:	06d1      	lsls	r1, r2, #27
 80029de:	bf44      	itt	mi
 80029e0:	2320      	movmi	r3, #32
 80029e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029e6:	0713      	lsls	r3, r2, #28
 80029e8:	bf44      	itt	mi
 80029ea:	232b      	movmi	r3, #43	; 0x2b
 80029ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80029f0:	f89a 3000 	ldrb.w	r3, [sl]
 80029f4:	2b2a      	cmp	r3, #42	; 0x2a
 80029f6:	d015      	beq.n	8002a24 <_vfiprintf_r+0x13c>
 80029f8:	9a07      	ldr	r2, [sp, #28]
 80029fa:	4654      	mov	r4, sl
 80029fc:	2000      	movs	r0, #0
 80029fe:	f04f 0c0a 	mov.w	ip, #10
 8002a02:	4621      	mov	r1, r4
 8002a04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a08:	3b30      	subs	r3, #48	; 0x30
 8002a0a:	2b09      	cmp	r3, #9
 8002a0c:	d94e      	bls.n	8002aac <_vfiprintf_r+0x1c4>
 8002a0e:	b1b0      	cbz	r0, 8002a3e <_vfiprintf_r+0x156>
 8002a10:	9207      	str	r2, [sp, #28]
 8002a12:	e014      	b.n	8002a3e <_vfiprintf_r+0x156>
 8002a14:	eba0 0308 	sub.w	r3, r0, r8
 8002a18:	fa09 f303 	lsl.w	r3, r9, r3
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	9304      	str	r3, [sp, #16]
 8002a20:	46a2      	mov	sl, r4
 8002a22:	e7d2      	b.n	80029ca <_vfiprintf_r+0xe2>
 8002a24:	9b03      	ldr	r3, [sp, #12]
 8002a26:	1d19      	adds	r1, r3, #4
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	9103      	str	r1, [sp, #12]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	bfbb      	ittet	lt
 8002a30:	425b      	neglt	r3, r3
 8002a32:	f042 0202 	orrlt.w	r2, r2, #2
 8002a36:	9307      	strge	r3, [sp, #28]
 8002a38:	9307      	strlt	r3, [sp, #28]
 8002a3a:	bfb8      	it	lt
 8002a3c:	9204      	strlt	r2, [sp, #16]
 8002a3e:	7823      	ldrb	r3, [r4, #0]
 8002a40:	2b2e      	cmp	r3, #46	; 0x2e
 8002a42:	d10c      	bne.n	8002a5e <_vfiprintf_r+0x176>
 8002a44:	7863      	ldrb	r3, [r4, #1]
 8002a46:	2b2a      	cmp	r3, #42	; 0x2a
 8002a48:	d135      	bne.n	8002ab6 <_vfiprintf_r+0x1ce>
 8002a4a:	9b03      	ldr	r3, [sp, #12]
 8002a4c:	1d1a      	adds	r2, r3, #4
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	9203      	str	r2, [sp, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	bfb8      	it	lt
 8002a56:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a5a:	3402      	adds	r4, #2
 8002a5c:	9305      	str	r3, [sp, #20]
 8002a5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002b44 <_vfiprintf_r+0x25c>
 8002a62:	7821      	ldrb	r1, [r4, #0]
 8002a64:	2203      	movs	r2, #3
 8002a66:	4650      	mov	r0, sl
 8002a68:	f7fd fbba 	bl	80001e0 <memchr>
 8002a6c:	b140      	cbz	r0, 8002a80 <_vfiprintf_r+0x198>
 8002a6e:	2340      	movs	r3, #64	; 0x40
 8002a70:	eba0 000a 	sub.w	r0, r0, sl
 8002a74:	fa03 f000 	lsl.w	r0, r3, r0
 8002a78:	9b04      	ldr	r3, [sp, #16]
 8002a7a:	4303      	orrs	r3, r0
 8002a7c:	3401      	adds	r4, #1
 8002a7e:	9304      	str	r3, [sp, #16]
 8002a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a84:	482c      	ldr	r0, [pc, #176]	; (8002b38 <_vfiprintf_r+0x250>)
 8002a86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a8a:	2206      	movs	r2, #6
 8002a8c:	f7fd fba8 	bl	80001e0 <memchr>
 8002a90:	2800      	cmp	r0, #0
 8002a92:	d03f      	beq.n	8002b14 <_vfiprintf_r+0x22c>
 8002a94:	4b29      	ldr	r3, [pc, #164]	; (8002b3c <_vfiprintf_r+0x254>)
 8002a96:	bb1b      	cbnz	r3, 8002ae0 <_vfiprintf_r+0x1f8>
 8002a98:	9b03      	ldr	r3, [sp, #12]
 8002a9a:	3307      	adds	r3, #7
 8002a9c:	f023 0307 	bic.w	r3, r3, #7
 8002aa0:	3308      	adds	r3, #8
 8002aa2:	9303      	str	r3, [sp, #12]
 8002aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002aa6:	443b      	add	r3, r7
 8002aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8002aaa:	e767      	b.n	800297c <_vfiprintf_r+0x94>
 8002aac:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ab0:	460c      	mov	r4, r1
 8002ab2:	2001      	movs	r0, #1
 8002ab4:	e7a5      	b.n	8002a02 <_vfiprintf_r+0x11a>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	3401      	adds	r4, #1
 8002aba:	9305      	str	r3, [sp, #20]
 8002abc:	4619      	mov	r1, r3
 8002abe:	f04f 0c0a 	mov.w	ip, #10
 8002ac2:	4620      	mov	r0, r4
 8002ac4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ac8:	3a30      	subs	r2, #48	; 0x30
 8002aca:	2a09      	cmp	r2, #9
 8002acc:	d903      	bls.n	8002ad6 <_vfiprintf_r+0x1ee>
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0c5      	beq.n	8002a5e <_vfiprintf_r+0x176>
 8002ad2:	9105      	str	r1, [sp, #20]
 8002ad4:	e7c3      	b.n	8002a5e <_vfiprintf_r+0x176>
 8002ad6:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ada:	4604      	mov	r4, r0
 8002adc:	2301      	movs	r3, #1
 8002ade:	e7f0      	b.n	8002ac2 <_vfiprintf_r+0x1da>
 8002ae0:	ab03      	add	r3, sp, #12
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	462a      	mov	r2, r5
 8002ae6:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <_vfiprintf_r+0x258>)
 8002ae8:	a904      	add	r1, sp, #16
 8002aea:	4630      	mov	r0, r6
 8002aec:	f3af 8000 	nop.w
 8002af0:	4607      	mov	r7, r0
 8002af2:	1c78      	adds	r0, r7, #1
 8002af4:	d1d6      	bne.n	8002aa4 <_vfiprintf_r+0x1bc>
 8002af6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002af8:	07d9      	lsls	r1, r3, #31
 8002afa:	d405      	bmi.n	8002b08 <_vfiprintf_r+0x220>
 8002afc:	89ab      	ldrh	r3, [r5, #12]
 8002afe:	059a      	lsls	r2, r3, #22
 8002b00:	d402      	bmi.n	8002b08 <_vfiprintf_r+0x220>
 8002b02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b04:	f000 fc55 	bl	80033b2 <__retarget_lock_release_recursive>
 8002b08:	89ab      	ldrh	r3, [r5, #12]
 8002b0a:	065b      	lsls	r3, r3, #25
 8002b0c:	f53f af12 	bmi.w	8002934 <_vfiprintf_r+0x4c>
 8002b10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b12:	e711      	b.n	8002938 <_vfiprintf_r+0x50>
 8002b14:	ab03      	add	r3, sp, #12
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	462a      	mov	r2, r5
 8002b1a:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <_vfiprintf_r+0x258>)
 8002b1c:	a904      	add	r1, sp, #16
 8002b1e:	4630      	mov	r0, r6
 8002b20:	f000 f880 	bl	8002c24 <_printf_i>
 8002b24:	e7e4      	b.n	8002af0 <_vfiprintf_r+0x208>
 8002b26:	bf00      	nop
 8002b28:	08003e60 	.word	0x08003e60
 8002b2c:	08003e80 	.word	0x08003e80
 8002b30:	08003e40 	.word	0x08003e40
 8002b34:	08003e0c 	.word	0x08003e0c
 8002b38:	08003e16 	.word	0x08003e16
 8002b3c:	00000000 	.word	0x00000000
 8002b40:	080028c3 	.word	0x080028c3
 8002b44:	08003e12 	.word	0x08003e12

08002b48 <_printf_common>:
 8002b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b4c:	4616      	mov	r6, r2
 8002b4e:	4699      	mov	r9, r3
 8002b50:	688a      	ldr	r2, [r1, #8]
 8002b52:	690b      	ldr	r3, [r1, #16]
 8002b54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	bfb8      	it	lt
 8002b5c:	4613      	movlt	r3, r2
 8002b5e:	6033      	str	r3, [r6, #0]
 8002b60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b64:	4607      	mov	r7, r0
 8002b66:	460c      	mov	r4, r1
 8002b68:	b10a      	cbz	r2, 8002b6e <_printf_common+0x26>
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	6033      	str	r3, [r6, #0]
 8002b6e:	6823      	ldr	r3, [r4, #0]
 8002b70:	0699      	lsls	r1, r3, #26
 8002b72:	bf42      	ittt	mi
 8002b74:	6833      	ldrmi	r3, [r6, #0]
 8002b76:	3302      	addmi	r3, #2
 8002b78:	6033      	strmi	r3, [r6, #0]
 8002b7a:	6825      	ldr	r5, [r4, #0]
 8002b7c:	f015 0506 	ands.w	r5, r5, #6
 8002b80:	d106      	bne.n	8002b90 <_printf_common+0x48>
 8002b82:	f104 0a19 	add.w	sl, r4, #25
 8002b86:	68e3      	ldr	r3, [r4, #12]
 8002b88:	6832      	ldr	r2, [r6, #0]
 8002b8a:	1a9b      	subs	r3, r3, r2
 8002b8c:	42ab      	cmp	r3, r5
 8002b8e:	dc26      	bgt.n	8002bde <_printf_common+0x96>
 8002b90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b94:	1e13      	subs	r3, r2, #0
 8002b96:	6822      	ldr	r2, [r4, #0]
 8002b98:	bf18      	it	ne
 8002b9a:	2301      	movne	r3, #1
 8002b9c:	0692      	lsls	r2, r2, #26
 8002b9e:	d42b      	bmi.n	8002bf8 <_printf_common+0xb0>
 8002ba0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ba4:	4649      	mov	r1, r9
 8002ba6:	4638      	mov	r0, r7
 8002ba8:	47c0      	blx	r8
 8002baa:	3001      	adds	r0, #1
 8002bac:	d01e      	beq.n	8002bec <_printf_common+0xa4>
 8002bae:	6823      	ldr	r3, [r4, #0]
 8002bb0:	68e5      	ldr	r5, [r4, #12]
 8002bb2:	6832      	ldr	r2, [r6, #0]
 8002bb4:	f003 0306 	and.w	r3, r3, #6
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	bf08      	it	eq
 8002bbc:	1aad      	subeq	r5, r5, r2
 8002bbe:	68a3      	ldr	r3, [r4, #8]
 8002bc0:	6922      	ldr	r2, [r4, #16]
 8002bc2:	bf0c      	ite	eq
 8002bc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002bc8:	2500      	movne	r5, #0
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	bfc4      	itt	gt
 8002bce:	1a9b      	subgt	r3, r3, r2
 8002bd0:	18ed      	addgt	r5, r5, r3
 8002bd2:	2600      	movs	r6, #0
 8002bd4:	341a      	adds	r4, #26
 8002bd6:	42b5      	cmp	r5, r6
 8002bd8:	d11a      	bne.n	8002c10 <_printf_common+0xc8>
 8002bda:	2000      	movs	r0, #0
 8002bdc:	e008      	b.n	8002bf0 <_printf_common+0xa8>
 8002bde:	2301      	movs	r3, #1
 8002be0:	4652      	mov	r2, sl
 8002be2:	4649      	mov	r1, r9
 8002be4:	4638      	mov	r0, r7
 8002be6:	47c0      	blx	r8
 8002be8:	3001      	adds	r0, #1
 8002bea:	d103      	bne.n	8002bf4 <_printf_common+0xac>
 8002bec:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bf4:	3501      	adds	r5, #1
 8002bf6:	e7c6      	b.n	8002b86 <_printf_common+0x3e>
 8002bf8:	18e1      	adds	r1, r4, r3
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	2030      	movs	r0, #48	; 0x30
 8002bfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c02:	4422      	add	r2, r4
 8002c04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c0c:	3302      	adds	r3, #2
 8002c0e:	e7c7      	b.n	8002ba0 <_printf_common+0x58>
 8002c10:	2301      	movs	r3, #1
 8002c12:	4622      	mov	r2, r4
 8002c14:	4649      	mov	r1, r9
 8002c16:	4638      	mov	r0, r7
 8002c18:	47c0      	blx	r8
 8002c1a:	3001      	adds	r0, #1
 8002c1c:	d0e6      	beq.n	8002bec <_printf_common+0xa4>
 8002c1e:	3601      	adds	r6, #1
 8002c20:	e7d9      	b.n	8002bd6 <_printf_common+0x8e>
	...

08002c24 <_printf_i>:
 8002c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c28:	460c      	mov	r4, r1
 8002c2a:	4691      	mov	r9, r2
 8002c2c:	7e27      	ldrb	r7, [r4, #24]
 8002c2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002c30:	2f78      	cmp	r7, #120	; 0x78
 8002c32:	4680      	mov	r8, r0
 8002c34:	469a      	mov	sl, r3
 8002c36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c3a:	d807      	bhi.n	8002c4c <_printf_i+0x28>
 8002c3c:	2f62      	cmp	r7, #98	; 0x62
 8002c3e:	d80a      	bhi.n	8002c56 <_printf_i+0x32>
 8002c40:	2f00      	cmp	r7, #0
 8002c42:	f000 80d8 	beq.w	8002df6 <_printf_i+0x1d2>
 8002c46:	2f58      	cmp	r7, #88	; 0x58
 8002c48:	f000 80a3 	beq.w	8002d92 <_printf_i+0x16e>
 8002c4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002c50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c54:	e03a      	b.n	8002ccc <_printf_i+0xa8>
 8002c56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c5a:	2b15      	cmp	r3, #21
 8002c5c:	d8f6      	bhi.n	8002c4c <_printf_i+0x28>
 8002c5e:	a001      	add	r0, pc, #4	; (adr r0, 8002c64 <_printf_i+0x40>)
 8002c60:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002c64:	08002cbd 	.word	0x08002cbd
 8002c68:	08002cd1 	.word	0x08002cd1
 8002c6c:	08002c4d 	.word	0x08002c4d
 8002c70:	08002c4d 	.word	0x08002c4d
 8002c74:	08002c4d 	.word	0x08002c4d
 8002c78:	08002c4d 	.word	0x08002c4d
 8002c7c:	08002cd1 	.word	0x08002cd1
 8002c80:	08002c4d 	.word	0x08002c4d
 8002c84:	08002c4d 	.word	0x08002c4d
 8002c88:	08002c4d 	.word	0x08002c4d
 8002c8c:	08002c4d 	.word	0x08002c4d
 8002c90:	08002ddd 	.word	0x08002ddd
 8002c94:	08002d01 	.word	0x08002d01
 8002c98:	08002dbf 	.word	0x08002dbf
 8002c9c:	08002c4d 	.word	0x08002c4d
 8002ca0:	08002c4d 	.word	0x08002c4d
 8002ca4:	08002dff 	.word	0x08002dff
 8002ca8:	08002c4d 	.word	0x08002c4d
 8002cac:	08002d01 	.word	0x08002d01
 8002cb0:	08002c4d 	.word	0x08002c4d
 8002cb4:	08002c4d 	.word	0x08002c4d
 8002cb8:	08002dc7 	.word	0x08002dc7
 8002cbc:	680b      	ldr	r3, [r1, #0]
 8002cbe:	1d1a      	adds	r2, r3, #4
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	600a      	str	r2, [r1, #0]
 8002cc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002cc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e0a3      	b.n	8002e18 <_printf_i+0x1f4>
 8002cd0:	6825      	ldr	r5, [r4, #0]
 8002cd2:	6808      	ldr	r0, [r1, #0]
 8002cd4:	062e      	lsls	r6, r5, #24
 8002cd6:	f100 0304 	add.w	r3, r0, #4
 8002cda:	d50a      	bpl.n	8002cf2 <_printf_i+0xce>
 8002cdc:	6805      	ldr	r5, [r0, #0]
 8002cde:	600b      	str	r3, [r1, #0]
 8002ce0:	2d00      	cmp	r5, #0
 8002ce2:	da03      	bge.n	8002cec <_printf_i+0xc8>
 8002ce4:	232d      	movs	r3, #45	; 0x2d
 8002ce6:	426d      	negs	r5, r5
 8002ce8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cec:	485e      	ldr	r0, [pc, #376]	; (8002e68 <_printf_i+0x244>)
 8002cee:	230a      	movs	r3, #10
 8002cf0:	e019      	b.n	8002d26 <_printf_i+0x102>
 8002cf2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002cf6:	6805      	ldr	r5, [r0, #0]
 8002cf8:	600b      	str	r3, [r1, #0]
 8002cfa:	bf18      	it	ne
 8002cfc:	b22d      	sxthne	r5, r5
 8002cfe:	e7ef      	b.n	8002ce0 <_printf_i+0xbc>
 8002d00:	680b      	ldr	r3, [r1, #0]
 8002d02:	6825      	ldr	r5, [r4, #0]
 8002d04:	1d18      	adds	r0, r3, #4
 8002d06:	6008      	str	r0, [r1, #0]
 8002d08:	0628      	lsls	r0, r5, #24
 8002d0a:	d501      	bpl.n	8002d10 <_printf_i+0xec>
 8002d0c:	681d      	ldr	r5, [r3, #0]
 8002d0e:	e002      	b.n	8002d16 <_printf_i+0xf2>
 8002d10:	0669      	lsls	r1, r5, #25
 8002d12:	d5fb      	bpl.n	8002d0c <_printf_i+0xe8>
 8002d14:	881d      	ldrh	r5, [r3, #0]
 8002d16:	4854      	ldr	r0, [pc, #336]	; (8002e68 <_printf_i+0x244>)
 8002d18:	2f6f      	cmp	r7, #111	; 0x6f
 8002d1a:	bf0c      	ite	eq
 8002d1c:	2308      	moveq	r3, #8
 8002d1e:	230a      	movne	r3, #10
 8002d20:	2100      	movs	r1, #0
 8002d22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d26:	6866      	ldr	r6, [r4, #4]
 8002d28:	60a6      	str	r6, [r4, #8]
 8002d2a:	2e00      	cmp	r6, #0
 8002d2c:	bfa2      	ittt	ge
 8002d2e:	6821      	ldrge	r1, [r4, #0]
 8002d30:	f021 0104 	bicge.w	r1, r1, #4
 8002d34:	6021      	strge	r1, [r4, #0]
 8002d36:	b90d      	cbnz	r5, 8002d3c <_printf_i+0x118>
 8002d38:	2e00      	cmp	r6, #0
 8002d3a:	d04d      	beq.n	8002dd8 <_printf_i+0x1b4>
 8002d3c:	4616      	mov	r6, r2
 8002d3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8002d42:	fb03 5711 	mls	r7, r3, r1, r5
 8002d46:	5dc7      	ldrb	r7, [r0, r7]
 8002d48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002d4c:	462f      	mov	r7, r5
 8002d4e:	42bb      	cmp	r3, r7
 8002d50:	460d      	mov	r5, r1
 8002d52:	d9f4      	bls.n	8002d3e <_printf_i+0x11a>
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d10b      	bne.n	8002d70 <_printf_i+0x14c>
 8002d58:	6823      	ldr	r3, [r4, #0]
 8002d5a:	07df      	lsls	r7, r3, #31
 8002d5c:	d508      	bpl.n	8002d70 <_printf_i+0x14c>
 8002d5e:	6923      	ldr	r3, [r4, #16]
 8002d60:	6861      	ldr	r1, [r4, #4]
 8002d62:	4299      	cmp	r1, r3
 8002d64:	bfde      	ittt	le
 8002d66:	2330      	movle	r3, #48	; 0x30
 8002d68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002d6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002d70:	1b92      	subs	r2, r2, r6
 8002d72:	6122      	str	r2, [r4, #16]
 8002d74:	f8cd a000 	str.w	sl, [sp]
 8002d78:	464b      	mov	r3, r9
 8002d7a:	aa03      	add	r2, sp, #12
 8002d7c:	4621      	mov	r1, r4
 8002d7e:	4640      	mov	r0, r8
 8002d80:	f7ff fee2 	bl	8002b48 <_printf_common>
 8002d84:	3001      	adds	r0, #1
 8002d86:	d14c      	bne.n	8002e22 <_printf_i+0x1fe>
 8002d88:	f04f 30ff 	mov.w	r0, #4294967295
 8002d8c:	b004      	add	sp, #16
 8002d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d92:	4835      	ldr	r0, [pc, #212]	; (8002e68 <_printf_i+0x244>)
 8002d94:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002d98:	6823      	ldr	r3, [r4, #0]
 8002d9a:	680e      	ldr	r6, [r1, #0]
 8002d9c:	061f      	lsls	r7, r3, #24
 8002d9e:	f856 5b04 	ldr.w	r5, [r6], #4
 8002da2:	600e      	str	r6, [r1, #0]
 8002da4:	d514      	bpl.n	8002dd0 <_printf_i+0x1ac>
 8002da6:	07d9      	lsls	r1, r3, #31
 8002da8:	bf44      	itt	mi
 8002daa:	f043 0320 	orrmi.w	r3, r3, #32
 8002dae:	6023      	strmi	r3, [r4, #0]
 8002db0:	b91d      	cbnz	r5, 8002dba <_printf_i+0x196>
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	f023 0320 	bic.w	r3, r3, #32
 8002db8:	6023      	str	r3, [r4, #0]
 8002dba:	2310      	movs	r3, #16
 8002dbc:	e7b0      	b.n	8002d20 <_printf_i+0xfc>
 8002dbe:	6823      	ldr	r3, [r4, #0]
 8002dc0:	f043 0320 	orr.w	r3, r3, #32
 8002dc4:	6023      	str	r3, [r4, #0]
 8002dc6:	2378      	movs	r3, #120	; 0x78
 8002dc8:	4828      	ldr	r0, [pc, #160]	; (8002e6c <_printf_i+0x248>)
 8002dca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002dce:	e7e3      	b.n	8002d98 <_printf_i+0x174>
 8002dd0:	065e      	lsls	r6, r3, #25
 8002dd2:	bf48      	it	mi
 8002dd4:	b2ad      	uxthmi	r5, r5
 8002dd6:	e7e6      	b.n	8002da6 <_printf_i+0x182>
 8002dd8:	4616      	mov	r6, r2
 8002dda:	e7bb      	b.n	8002d54 <_printf_i+0x130>
 8002ddc:	680b      	ldr	r3, [r1, #0]
 8002dde:	6826      	ldr	r6, [r4, #0]
 8002de0:	6960      	ldr	r0, [r4, #20]
 8002de2:	1d1d      	adds	r5, r3, #4
 8002de4:	600d      	str	r5, [r1, #0]
 8002de6:	0635      	lsls	r5, r6, #24
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	d501      	bpl.n	8002df0 <_printf_i+0x1cc>
 8002dec:	6018      	str	r0, [r3, #0]
 8002dee:	e002      	b.n	8002df6 <_printf_i+0x1d2>
 8002df0:	0671      	lsls	r1, r6, #25
 8002df2:	d5fb      	bpl.n	8002dec <_printf_i+0x1c8>
 8002df4:	8018      	strh	r0, [r3, #0]
 8002df6:	2300      	movs	r3, #0
 8002df8:	6123      	str	r3, [r4, #16]
 8002dfa:	4616      	mov	r6, r2
 8002dfc:	e7ba      	b.n	8002d74 <_printf_i+0x150>
 8002dfe:	680b      	ldr	r3, [r1, #0]
 8002e00:	1d1a      	adds	r2, r3, #4
 8002e02:	600a      	str	r2, [r1, #0]
 8002e04:	681e      	ldr	r6, [r3, #0]
 8002e06:	6862      	ldr	r2, [r4, #4]
 8002e08:	2100      	movs	r1, #0
 8002e0a:	4630      	mov	r0, r6
 8002e0c:	f7fd f9e8 	bl	80001e0 <memchr>
 8002e10:	b108      	cbz	r0, 8002e16 <_printf_i+0x1f2>
 8002e12:	1b80      	subs	r0, r0, r6
 8002e14:	6060      	str	r0, [r4, #4]
 8002e16:	6863      	ldr	r3, [r4, #4]
 8002e18:	6123      	str	r3, [r4, #16]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e20:	e7a8      	b.n	8002d74 <_printf_i+0x150>
 8002e22:	6923      	ldr	r3, [r4, #16]
 8002e24:	4632      	mov	r2, r6
 8002e26:	4649      	mov	r1, r9
 8002e28:	4640      	mov	r0, r8
 8002e2a:	47d0      	blx	sl
 8002e2c:	3001      	adds	r0, #1
 8002e2e:	d0ab      	beq.n	8002d88 <_printf_i+0x164>
 8002e30:	6823      	ldr	r3, [r4, #0]
 8002e32:	079b      	lsls	r3, r3, #30
 8002e34:	d413      	bmi.n	8002e5e <_printf_i+0x23a>
 8002e36:	68e0      	ldr	r0, [r4, #12]
 8002e38:	9b03      	ldr	r3, [sp, #12]
 8002e3a:	4298      	cmp	r0, r3
 8002e3c:	bfb8      	it	lt
 8002e3e:	4618      	movlt	r0, r3
 8002e40:	e7a4      	b.n	8002d8c <_printf_i+0x168>
 8002e42:	2301      	movs	r3, #1
 8002e44:	4632      	mov	r2, r6
 8002e46:	4649      	mov	r1, r9
 8002e48:	4640      	mov	r0, r8
 8002e4a:	47d0      	blx	sl
 8002e4c:	3001      	adds	r0, #1
 8002e4e:	d09b      	beq.n	8002d88 <_printf_i+0x164>
 8002e50:	3501      	adds	r5, #1
 8002e52:	68e3      	ldr	r3, [r4, #12]
 8002e54:	9903      	ldr	r1, [sp, #12]
 8002e56:	1a5b      	subs	r3, r3, r1
 8002e58:	42ab      	cmp	r3, r5
 8002e5a:	dcf2      	bgt.n	8002e42 <_printf_i+0x21e>
 8002e5c:	e7eb      	b.n	8002e36 <_printf_i+0x212>
 8002e5e:	2500      	movs	r5, #0
 8002e60:	f104 0619 	add.w	r6, r4, #25
 8002e64:	e7f5      	b.n	8002e52 <_printf_i+0x22e>
 8002e66:	bf00      	nop
 8002e68:	08003e1d 	.word	0x08003e1d
 8002e6c:	08003e2e 	.word	0x08003e2e

08002e70 <_vsiprintf_r>:
 8002e70:	b500      	push	{lr}
 8002e72:	b09b      	sub	sp, #108	; 0x6c
 8002e74:	9100      	str	r1, [sp, #0]
 8002e76:	9104      	str	r1, [sp, #16]
 8002e78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002e7c:	9105      	str	r1, [sp, #20]
 8002e7e:	9102      	str	r1, [sp, #8]
 8002e80:	4905      	ldr	r1, [pc, #20]	; (8002e98 <_vsiprintf_r+0x28>)
 8002e82:	9103      	str	r1, [sp, #12]
 8002e84:	4669      	mov	r1, sp
 8002e86:	f000 fc3f 	bl	8003708 <_svfiprintf_r>
 8002e8a:	9b00      	ldr	r3, [sp, #0]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]
 8002e90:	b01b      	add	sp, #108	; 0x6c
 8002e92:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e96:	bf00      	nop
 8002e98:	ffff0208 	.word	0xffff0208

08002e9c <vsiprintf>:
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	460a      	mov	r2, r1
 8002ea0:	4601      	mov	r1, r0
 8002ea2:	4802      	ldr	r0, [pc, #8]	; (8002eac <vsiprintf+0x10>)
 8002ea4:	6800      	ldr	r0, [r0, #0]
 8002ea6:	f7ff bfe3 	b.w	8002e70 <_vsiprintf_r>
 8002eaa:	bf00      	nop
 8002eac:	2000008c 	.word	0x2000008c

08002eb0 <__swbuf_r>:
 8002eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb2:	460e      	mov	r6, r1
 8002eb4:	4614      	mov	r4, r2
 8002eb6:	4605      	mov	r5, r0
 8002eb8:	b118      	cbz	r0, 8002ec2 <__swbuf_r+0x12>
 8002eba:	6983      	ldr	r3, [r0, #24]
 8002ebc:	b90b      	cbnz	r3, 8002ec2 <__swbuf_r+0x12>
 8002ebe:	f000 f9d9 	bl	8003274 <__sinit>
 8002ec2:	4b21      	ldr	r3, [pc, #132]	; (8002f48 <__swbuf_r+0x98>)
 8002ec4:	429c      	cmp	r4, r3
 8002ec6:	d12b      	bne.n	8002f20 <__swbuf_r+0x70>
 8002ec8:	686c      	ldr	r4, [r5, #4]
 8002eca:	69a3      	ldr	r3, [r4, #24]
 8002ecc:	60a3      	str	r3, [r4, #8]
 8002ece:	89a3      	ldrh	r3, [r4, #12]
 8002ed0:	071a      	lsls	r2, r3, #28
 8002ed2:	d52f      	bpl.n	8002f34 <__swbuf_r+0x84>
 8002ed4:	6923      	ldr	r3, [r4, #16]
 8002ed6:	b36b      	cbz	r3, 8002f34 <__swbuf_r+0x84>
 8002ed8:	6923      	ldr	r3, [r4, #16]
 8002eda:	6820      	ldr	r0, [r4, #0]
 8002edc:	1ac0      	subs	r0, r0, r3
 8002ede:	6963      	ldr	r3, [r4, #20]
 8002ee0:	b2f6      	uxtb	r6, r6
 8002ee2:	4283      	cmp	r3, r0
 8002ee4:	4637      	mov	r7, r6
 8002ee6:	dc04      	bgt.n	8002ef2 <__swbuf_r+0x42>
 8002ee8:	4621      	mov	r1, r4
 8002eea:	4628      	mov	r0, r5
 8002eec:	f000 f92e 	bl	800314c <_fflush_r>
 8002ef0:	bb30      	cbnz	r0, 8002f40 <__swbuf_r+0x90>
 8002ef2:	68a3      	ldr	r3, [r4, #8]
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	60a3      	str	r3, [r4, #8]
 8002ef8:	6823      	ldr	r3, [r4, #0]
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	6022      	str	r2, [r4, #0]
 8002efe:	701e      	strb	r6, [r3, #0]
 8002f00:	6963      	ldr	r3, [r4, #20]
 8002f02:	3001      	adds	r0, #1
 8002f04:	4283      	cmp	r3, r0
 8002f06:	d004      	beq.n	8002f12 <__swbuf_r+0x62>
 8002f08:	89a3      	ldrh	r3, [r4, #12]
 8002f0a:	07db      	lsls	r3, r3, #31
 8002f0c:	d506      	bpl.n	8002f1c <__swbuf_r+0x6c>
 8002f0e:	2e0a      	cmp	r6, #10
 8002f10:	d104      	bne.n	8002f1c <__swbuf_r+0x6c>
 8002f12:	4621      	mov	r1, r4
 8002f14:	4628      	mov	r0, r5
 8002f16:	f000 f919 	bl	800314c <_fflush_r>
 8002f1a:	b988      	cbnz	r0, 8002f40 <__swbuf_r+0x90>
 8002f1c:	4638      	mov	r0, r7
 8002f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f20:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <__swbuf_r+0x9c>)
 8002f22:	429c      	cmp	r4, r3
 8002f24:	d101      	bne.n	8002f2a <__swbuf_r+0x7a>
 8002f26:	68ac      	ldr	r4, [r5, #8]
 8002f28:	e7cf      	b.n	8002eca <__swbuf_r+0x1a>
 8002f2a:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <__swbuf_r+0xa0>)
 8002f2c:	429c      	cmp	r4, r3
 8002f2e:	bf08      	it	eq
 8002f30:	68ec      	ldreq	r4, [r5, #12]
 8002f32:	e7ca      	b.n	8002eca <__swbuf_r+0x1a>
 8002f34:	4621      	mov	r1, r4
 8002f36:	4628      	mov	r0, r5
 8002f38:	f000 f80c 	bl	8002f54 <__swsetup_r>
 8002f3c:	2800      	cmp	r0, #0
 8002f3e:	d0cb      	beq.n	8002ed8 <__swbuf_r+0x28>
 8002f40:	f04f 37ff 	mov.w	r7, #4294967295
 8002f44:	e7ea      	b.n	8002f1c <__swbuf_r+0x6c>
 8002f46:	bf00      	nop
 8002f48:	08003e60 	.word	0x08003e60
 8002f4c:	08003e80 	.word	0x08003e80
 8002f50:	08003e40 	.word	0x08003e40

08002f54 <__swsetup_r>:
 8002f54:	4b32      	ldr	r3, [pc, #200]	; (8003020 <__swsetup_r+0xcc>)
 8002f56:	b570      	push	{r4, r5, r6, lr}
 8002f58:	681d      	ldr	r5, [r3, #0]
 8002f5a:	4606      	mov	r6, r0
 8002f5c:	460c      	mov	r4, r1
 8002f5e:	b125      	cbz	r5, 8002f6a <__swsetup_r+0x16>
 8002f60:	69ab      	ldr	r3, [r5, #24]
 8002f62:	b913      	cbnz	r3, 8002f6a <__swsetup_r+0x16>
 8002f64:	4628      	mov	r0, r5
 8002f66:	f000 f985 	bl	8003274 <__sinit>
 8002f6a:	4b2e      	ldr	r3, [pc, #184]	; (8003024 <__swsetup_r+0xd0>)
 8002f6c:	429c      	cmp	r4, r3
 8002f6e:	d10f      	bne.n	8002f90 <__swsetup_r+0x3c>
 8002f70:	686c      	ldr	r4, [r5, #4]
 8002f72:	89a3      	ldrh	r3, [r4, #12]
 8002f74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002f78:	0719      	lsls	r1, r3, #28
 8002f7a:	d42c      	bmi.n	8002fd6 <__swsetup_r+0x82>
 8002f7c:	06dd      	lsls	r5, r3, #27
 8002f7e:	d411      	bmi.n	8002fa4 <__swsetup_r+0x50>
 8002f80:	2309      	movs	r3, #9
 8002f82:	6033      	str	r3, [r6, #0]
 8002f84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002f88:	81a3      	strh	r3, [r4, #12]
 8002f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f8e:	e03e      	b.n	800300e <__swsetup_r+0xba>
 8002f90:	4b25      	ldr	r3, [pc, #148]	; (8003028 <__swsetup_r+0xd4>)
 8002f92:	429c      	cmp	r4, r3
 8002f94:	d101      	bne.n	8002f9a <__swsetup_r+0x46>
 8002f96:	68ac      	ldr	r4, [r5, #8]
 8002f98:	e7eb      	b.n	8002f72 <__swsetup_r+0x1e>
 8002f9a:	4b24      	ldr	r3, [pc, #144]	; (800302c <__swsetup_r+0xd8>)
 8002f9c:	429c      	cmp	r4, r3
 8002f9e:	bf08      	it	eq
 8002fa0:	68ec      	ldreq	r4, [r5, #12]
 8002fa2:	e7e6      	b.n	8002f72 <__swsetup_r+0x1e>
 8002fa4:	0758      	lsls	r0, r3, #29
 8002fa6:	d512      	bpl.n	8002fce <__swsetup_r+0x7a>
 8002fa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002faa:	b141      	cbz	r1, 8002fbe <__swsetup_r+0x6a>
 8002fac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fb0:	4299      	cmp	r1, r3
 8002fb2:	d002      	beq.n	8002fba <__swsetup_r+0x66>
 8002fb4:	4630      	mov	r0, r6
 8002fb6:	f000 fa7b 	bl	80034b0 <_free_r>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	6363      	str	r3, [r4, #52]	; 0x34
 8002fbe:	89a3      	ldrh	r3, [r4, #12]
 8002fc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002fc4:	81a3      	strh	r3, [r4, #12]
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	6063      	str	r3, [r4, #4]
 8002fca:	6923      	ldr	r3, [r4, #16]
 8002fcc:	6023      	str	r3, [r4, #0]
 8002fce:	89a3      	ldrh	r3, [r4, #12]
 8002fd0:	f043 0308 	orr.w	r3, r3, #8
 8002fd4:	81a3      	strh	r3, [r4, #12]
 8002fd6:	6923      	ldr	r3, [r4, #16]
 8002fd8:	b94b      	cbnz	r3, 8002fee <__swsetup_r+0x9a>
 8002fda:	89a3      	ldrh	r3, [r4, #12]
 8002fdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fe4:	d003      	beq.n	8002fee <__swsetup_r+0x9a>
 8002fe6:	4621      	mov	r1, r4
 8002fe8:	4630      	mov	r0, r6
 8002fea:	f000 fa07 	bl	80033fc <__smakebuf_r>
 8002fee:	89a0      	ldrh	r0, [r4, #12]
 8002ff0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ff4:	f010 0301 	ands.w	r3, r0, #1
 8002ff8:	d00a      	beq.n	8003010 <__swsetup_r+0xbc>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60a3      	str	r3, [r4, #8]
 8002ffe:	6963      	ldr	r3, [r4, #20]
 8003000:	425b      	negs	r3, r3
 8003002:	61a3      	str	r3, [r4, #24]
 8003004:	6923      	ldr	r3, [r4, #16]
 8003006:	b943      	cbnz	r3, 800301a <__swsetup_r+0xc6>
 8003008:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800300c:	d1ba      	bne.n	8002f84 <__swsetup_r+0x30>
 800300e:	bd70      	pop	{r4, r5, r6, pc}
 8003010:	0781      	lsls	r1, r0, #30
 8003012:	bf58      	it	pl
 8003014:	6963      	ldrpl	r3, [r4, #20]
 8003016:	60a3      	str	r3, [r4, #8]
 8003018:	e7f4      	b.n	8003004 <__swsetup_r+0xb0>
 800301a:	2000      	movs	r0, #0
 800301c:	e7f7      	b.n	800300e <__swsetup_r+0xba>
 800301e:	bf00      	nop
 8003020:	2000008c 	.word	0x2000008c
 8003024:	08003e60 	.word	0x08003e60
 8003028:	08003e80 	.word	0x08003e80
 800302c:	08003e40 	.word	0x08003e40

08003030 <abort>:
 8003030:	b508      	push	{r3, lr}
 8003032:	2006      	movs	r0, #6
 8003034:	f000 fca0 	bl	8003978 <raise>
 8003038:	2001      	movs	r0, #1
 800303a:	f7fd fdbf 	bl	8000bbc <_exit>
	...

08003040 <__sflush_r>:
 8003040:	898a      	ldrh	r2, [r1, #12]
 8003042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003046:	4605      	mov	r5, r0
 8003048:	0710      	lsls	r0, r2, #28
 800304a:	460c      	mov	r4, r1
 800304c:	d458      	bmi.n	8003100 <__sflush_r+0xc0>
 800304e:	684b      	ldr	r3, [r1, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	dc05      	bgt.n	8003060 <__sflush_r+0x20>
 8003054:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003056:	2b00      	cmp	r3, #0
 8003058:	dc02      	bgt.n	8003060 <__sflush_r+0x20>
 800305a:	2000      	movs	r0, #0
 800305c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003060:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003062:	2e00      	cmp	r6, #0
 8003064:	d0f9      	beq.n	800305a <__sflush_r+0x1a>
 8003066:	2300      	movs	r3, #0
 8003068:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800306c:	682f      	ldr	r7, [r5, #0]
 800306e:	602b      	str	r3, [r5, #0]
 8003070:	d032      	beq.n	80030d8 <__sflush_r+0x98>
 8003072:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003074:	89a3      	ldrh	r3, [r4, #12]
 8003076:	075a      	lsls	r2, r3, #29
 8003078:	d505      	bpl.n	8003086 <__sflush_r+0x46>
 800307a:	6863      	ldr	r3, [r4, #4]
 800307c:	1ac0      	subs	r0, r0, r3
 800307e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003080:	b10b      	cbz	r3, 8003086 <__sflush_r+0x46>
 8003082:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003084:	1ac0      	subs	r0, r0, r3
 8003086:	2300      	movs	r3, #0
 8003088:	4602      	mov	r2, r0
 800308a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800308c:	6a21      	ldr	r1, [r4, #32]
 800308e:	4628      	mov	r0, r5
 8003090:	47b0      	blx	r6
 8003092:	1c43      	adds	r3, r0, #1
 8003094:	89a3      	ldrh	r3, [r4, #12]
 8003096:	d106      	bne.n	80030a6 <__sflush_r+0x66>
 8003098:	6829      	ldr	r1, [r5, #0]
 800309a:	291d      	cmp	r1, #29
 800309c:	d82c      	bhi.n	80030f8 <__sflush_r+0xb8>
 800309e:	4a2a      	ldr	r2, [pc, #168]	; (8003148 <__sflush_r+0x108>)
 80030a0:	40ca      	lsrs	r2, r1
 80030a2:	07d6      	lsls	r6, r2, #31
 80030a4:	d528      	bpl.n	80030f8 <__sflush_r+0xb8>
 80030a6:	2200      	movs	r2, #0
 80030a8:	6062      	str	r2, [r4, #4]
 80030aa:	04d9      	lsls	r1, r3, #19
 80030ac:	6922      	ldr	r2, [r4, #16]
 80030ae:	6022      	str	r2, [r4, #0]
 80030b0:	d504      	bpl.n	80030bc <__sflush_r+0x7c>
 80030b2:	1c42      	adds	r2, r0, #1
 80030b4:	d101      	bne.n	80030ba <__sflush_r+0x7a>
 80030b6:	682b      	ldr	r3, [r5, #0]
 80030b8:	b903      	cbnz	r3, 80030bc <__sflush_r+0x7c>
 80030ba:	6560      	str	r0, [r4, #84]	; 0x54
 80030bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030be:	602f      	str	r7, [r5, #0]
 80030c0:	2900      	cmp	r1, #0
 80030c2:	d0ca      	beq.n	800305a <__sflush_r+0x1a>
 80030c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030c8:	4299      	cmp	r1, r3
 80030ca:	d002      	beq.n	80030d2 <__sflush_r+0x92>
 80030cc:	4628      	mov	r0, r5
 80030ce:	f000 f9ef 	bl	80034b0 <_free_r>
 80030d2:	2000      	movs	r0, #0
 80030d4:	6360      	str	r0, [r4, #52]	; 0x34
 80030d6:	e7c1      	b.n	800305c <__sflush_r+0x1c>
 80030d8:	6a21      	ldr	r1, [r4, #32]
 80030da:	2301      	movs	r3, #1
 80030dc:	4628      	mov	r0, r5
 80030de:	47b0      	blx	r6
 80030e0:	1c41      	adds	r1, r0, #1
 80030e2:	d1c7      	bne.n	8003074 <__sflush_r+0x34>
 80030e4:	682b      	ldr	r3, [r5, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0c4      	beq.n	8003074 <__sflush_r+0x34>
 80030ea:	2b1d      	cmp	r3, #29
 80030ec:	d001      	beq.n	80030f2 <__sflush_r+0xb2>
 80030ee:	2b16      	cmp	r3, #22
 80030f0:	d101      	bne.n	80030f6 <__sflush_r+0xb6>
 80030f2:	602f      	str	r7, [r5, #0]
 80030f4:	e7b1      	b.n	800305a <__sflush_r+0x1a>
 80030f6:	89a3      	ldrh	r3, [r4, #12]
 80030f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030fc:	81a3      	strh	r3, [r4, #12]
 80030fe:	e7ad      	b.n	800305c <__sflush_r+0x1c>
 8003100:	690f      	ldr	r7, [r1, #16]
 8003102:	2f00      	cmp	r7, #0
 8003104:	d0a9      	beq.n	800305a <__sflush_r+0x1a>
 8003106:	0793      	lsls	r3, r2, #30
 8003108:	680e      	ldr	r6, [r1, #0]
 800310a:	bf08      	it	eq
 800310c:	694b      	ldreq	r3, [r1, #20]
 800310e:	600f      	str	r7, [r1, #0]
 8003110:	bf18      	it	ne
 8003112:	2300      	movne	r3, #0
 8003114:	eba6 0807 	sub.w	r8, r6, r7
 8003118:	608b      	str	r3, [r1, #8]
 800311a:	f1b8 0f00 	cmp.w	r8, #0
 800311e:	dd9c      	ble.n	800305a <__sflush_r+0x1a>
 8003120:	6a21      	ldr	r1, [r4, #32]
 8003122:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003124:	4643      	mov	r3, r8
 8003126:	463a      	mov	r2, r7
 8003128:	4628      	mov	r0, r5
 800312a:	47b0      	blx	r6
 800312c:	2800      	cmp	r0, #0
 800312e:	dc06      	bgt.n	800313e <__sflush_r+0xfe>
 8003130:	89a3      	ldrh	r3, [r4, #12]
 8003132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003136:	81a3      	strh	r3, [r4, #12]
 8003138:	f04f 30ff 	mov.w	r0, #4294967295
 800313c:	e78e      	b.n	800305c <__sflush_r+0x1c>
 800313e:	4407      	add	r7, r0
 8003140:	eba8 0800 	sub.w	r8, r8, r0
 8003144:	e7e9      	b.n	800311a <__sflush_r+0xda>
 8003146:	bf00      	nop
 8003148:	20400001 	.word	0x20400001

0800314c <_fflush_r>:
 800314c:	b538      	push	{r3, r4, r5, lr}
 800314e:	690b      	ldr	r3, [r1, #16]
 8003150:	4605      	mov	r5, r0
 8003152:	460c      	mov	r4, r1
 8003154:	b913      	cbnz	r3, 800315c <_fflush_r+0x10>
 8003156:	2500      	movs	r5, #0
 8003158:	4628      	mov	r0, r5
 800315a:	bd38      	pop	{r3, r4, r5, pc}
 800315c:	b118      	cbz	r0, 8003166 <_fflush_r+0x1a>
 800315e:	6983      	ldr	r3, [r0, #24]
 8003160:	b90b      	cbnz	r3, 8003166 <_fflush_r+0x1a>
 8003162:	f000 f887 	bl	8003274 <__sinit>
 8003166:	4b14      	ldr	r3, [pc, #80]	; (80031b8 <_fflush_r+0x6c>)
 8003168:	429c      	cmp	r4, r3
 800316a:	d11b      	bne.n	80031a4 <_fflush_r+0x58>
 800316c:	686c      	ldr	r4, [r5, #4]
 800316e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0ef      	beq.n	8003156 <_fflush_r+0xa>
 8003176:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003178:	07d0      	lsls	r0, r2, #31
 800317a:	d404      	bmi.n	8003186 <_fflush_r+0x3a>
 800317c:	0599      	lsls	r1, r3, #22
 800317e:	d402      	bmi.n	8003186 <_fflush_r+0x3a>
 8003180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003182:	f000 f915 	bl	80033b0 <__retarget_lock_acquire_recursive>
 8003186:	4628      	mov	r0, r5
 8003188:	4621      	mov	r1, r4
 800318a:	f7ff ff59 	bl	8003040 <__sflush_r>
 800318e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003190:	07da      	lsls	r2, r3, #31
 8003192:	4605      	mov	r5, r0
 8003194:	d4e0      	bmi.n	8003158 <_fflush_r+0xc>
 8003196:	89a3      	ldrh	r3, [r4, #12]
 8003198:	059b      	lsls	r3, r3, #22
 800319a:	d4dd      	bmi.n	8003158 <_fflush_r+0xc>
 800319c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800319e:	f000 f908 	bl	80033b2 <__retarget_lock_release_recursive>
 80031a2:	e7d9      	b.n	8003158 <_fflush_r+0xc>
 80031a4:	4b05      	ldr	r3, [pc, #20]	; (80031bc <_fflush_r+0x70>)
 80031a6:	429c      	cmp	r4, r3
 80031a8:	d101      	bne.n	80031ae <_fflush_r+0x62>
 80031aa:	68ac      	ldr	r4, [r5, #8]
 80031ac:	e7df      	b.n	800316e <_fflush_r+0x22>
 80031ae:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <_fflush_r+0x74>)
 80031b0:	429c      	cmp	r4, r3
 80031b2:	bf08      	it	eq
 80031b4:	68ec      	ldreq	r4, [r5, #12]
 80031b6:	e7da      	b.n	800316e <_fflush_r+0x22>
 80031b8:	08003e60 	.word	0x08003e60
 80031bc:	08003e80 	.word	0x08003e80
 80031c0:	08003e40 	.word	0x08003e40

080031c4 <std>:
 80031c4:	2300      	movs	r3, #0
 80031c6:	b510      	push	{r4, lr}
 80031c8:	4604      	mov	r4, r0
 80031ca:	e9c0 3300 	strd	r3, r3, [r0]
 80031ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031d2:	6083      	str	r3, [r0, #8]
 80031d4:	8181      	strh	r1, [r0, #12]
 80031d6:	6643      	str	r3, [r0, #100]	; 0x64
 80031d8:	81c2      	strh	r2, [r0, #14]
 80031da:	6183      	str	r3, [r0, #24]
 80031dc:	4619      	mov	r1, r3
 80031de:	2208      	movs	r2, #8
 80031e0:	305c      	adds	r0, #92	; 0x5c
 80031e2:	f7ff fb4f 	bl	8002884 <memset>
 80031e6:	4b05      	ldr	r3, [pc, #20]	; (80031fc <std+0x38>)
 80031e8:	6263      	str	r3, [r4, #36]	; 0x24
 80031ea:	4b05      	ldr	r3, [pc, #20]	; (8003200 <std+0x3c>)
 80031ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80031ee:	4b05      	ldr	r3, [pc, #20]	; (8003204 <std+0x40>)
 80031f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031f2:	4b05      	ldr	r3, [pc, #20]	; (8003208 <std+0x44>)
 80031f4:	6224      	str	r4, [r4, #32]
 80031f6:	6323      	str	r3, [r4, #48]	; 0x30
 80031f8:	bd10      	pop	{r4, pc}
 80031fa:	bf00      	nop
 80031fc:	080039b1 	.word	0x080039b1
 8003200:	080039d3 	.word	0x080039d3
 8003204:	08003a0b 	.word	0x08003a0b
 8003208:	08003a2f 	.word	0x08003a2f

0800320c <_cleanup_r>:
 800320c:	4901      	ldr	r1, [pc, #4]	; (8003214 <_cleanup_r+0x8>)
 800320e:	f000 b8af 	b.w	8003370 <_fwalk_reent>
 8003212:	bf00      	nop
 8003214:	0800314d 	.word	0x0800314d

08003218 <__sfmoreglue>:
 8003218:	b570      	push	{r4, r5, r6, lr}
 800321a:	1e4a      	subs	r2, r1, #1
 800321c:	2568      	movs	r5, #104	; 0x68
 800321e:	4355      	muls	r5, r2
 8003220:	460e      	mov	r6, r1
 8003222:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003226:	f000 f993 	bl	8003550 <_malloc_r>
 800322a:	4604      	mov	r4, r0
 800322c:	b140      	cbz	r0, 8003240 <__sfmoreglue+0x28>
 800322e:	2100      	movs	r1, #0
 8003230:	e9c0 1600 	strd	r1, r6, [r0]
 8003234:	300c      	adds	r0, #12
 8003236:	60a0      	str	r0, [r4, #8]
 8003238:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800323c:	f7ff fb22 	bl	8002884 <memset>
 8003240:	4620      	mov	r0, r4
 8003242:	bd70      	pop	{r4, r5, r6, pc}

08003244 <__sfp_lock_acquire>:
 8003244:	4801      	ldr	r0, [pc, #4]	; (800324c <__sfp_lock_acquire+0x8>)
 8003246:	f000 b8b3 	b.w	80033b0 <__retarget_lock_acquire_recursive>
 800324a:	bf00      	nop
 800324c:	200003c0 	.word	0x200003c0

08003250 <__sfp_lock_release>:
 8003250:	4801      	ldr	r0, [pc, #4]	; (8003258 <__sfp_lock_release+0x8>)
 8003252:	f000 b8ae 	b.w	80033b2 <__retarget_lock_release_recursive>
 8003256:	bf00      	nop
 8003258:	200003c0 	.word	0x200003c0

0800325c <__sinit_lock_acquire>:
 800325c:	4801      	ldr	r0, [pc, #4]	; (8003264 <__sinit_lock_acquire+0x8>)
 800325e:	f000 b8a7 	b.w	80033b0 <__retarget_lock_acquire_recursive>
 8003262:	bf00      	nop
 8003264:	200003bb 	.word	0x200003bb

08003268 <__sinit_lock_release>:
 8003268:	4801      	ldr	r0, [pc, #4]	; (8003270 <__sinit_lock_release+0x8>)
 800326a:	f000 b8a2 	b.w	80033b2 <__retarget_lock_release_recursive>
 800326e:	bf00      	nop
 8003270:	200003bb 	.word	0x200003bb

08003274 <__sinit>:
 8003274:	b510      	push	{r4, lr}
 8003276:	4604      	mov	r4, r0
 8003278:	f7ff fff0 	bl	800325c <__sinit_lock_acquire>
 800327c:	69a3      	ldr	r3, [r4, #24]
 800327e:	b11b      	cbz	r3, 8003288 <__sinit+0x14>
 8003280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003284:	f7ff bff0 	b.w	8003268 <__sinit_lock_release>
 8003288:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800328c:	6523      	str	r3, [r4, #80]	; 0x50
 800328e:	4b13      	ldr	r3, [pc, #76]	; (80032dc <__sinit+0x68>)
 8003290:	4a13      	ldr	r2, [pc, #76]	; (80032e0 <__sinit+0x6c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	62a2      	str	r2, [r4, #40]	; 0x28
 8003296:	42a3      	cmp	r3, r4
 8003298:	bf04      	itt	eq
 800329a:	2301      	moveq	r3, #1
 800329c:	61a3      	streq	r3, [r4, #24]
 800329e:	4620      	mov	r0, r4
 80032a0:	f000 f820 	bl	80032e4 <__sfp>
 80032a4:	6060      	str	r0, [r4, #4]
 80032a6:	4620      	mov	r0, r4
 80032a8:	f000 f81c 	bl	80032e4 <__sfp>
 80032ac:	60a0      	str	r0, [r4, #8]
 80032ae:	4620      	mov	r0, r4
 80032b0:	f000 f818 	bl	80032e4 <__sfp>
 80032b4:	2200      	movs	r2, #0
 80032b6:	60e0      	str	r0, [r4, #12]
 80032b8:	2104      	movs	r1, #4
 80032ba:	6860      	ldr	r0, [r4, #4]
 80032bc:	f7ff ff82 	bl	80031c4 <std>
 80032c0:	68a0      	ldr	r0, [r4, #8]
 80032c2:	2201      	movs	r2, #1
 80032c4:	2109      	movs	r1, #9
 80032c6:	f7ff ff7d 	bl	80031c4 <std>
 80032ca:	68e0      	ldr	r0, [r4, #12]
 80032cc:	2202      	movs	r2, #2
 80032ce:	2112      	movs	r1, #18
 80032d0:	f7ff ff78 	bl	80031c4 <std>
 80032d4:	2301      	movs	r3, #1
 80032d6:	61a3      	str	r3, [r4, #24]
 80032d8:	e7d2      	b.n	8003280 <__sinit+0xc>
 80032da:	bf00      	nop
 80032dc:	08003e08 	.word	0x08003e08
 80032e0:	0800320d 	.word	0x0800320d

080032e4 <__sfp>:
 80032e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032e6:	4607      	mov	r7, r0
 80032e8:	f7ff ffac 	bl	8003244 <__sfp_lock_acquire>
 80032ec:	4b1e      	ldr	r3, [pc, #120]	; (8003368 <__sfp+0x84>)
 80032ee:	681e      	ldr	r6, [r3, #0]
 80032f0:	69b3      	ldr	r3, [r6, #24]
 80032f2:	b913      	cbnz	r3, 80032fa <__sfp+0x16>
 80032f4:	4630      	mov	r0, r6
 80032f6:	f7ff ffbd 	bl	8003274 <__sinit>
 80032fa:	3648      	adds	r6, #72	; 0x48
 80032fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003300:	3b01      	subs	r3, #1
 8003302:	d503      	bpl.n	800330c <__sfp+0x28>
 8003304:	6833      	ldr	r3, [r6, #0]
 8003306:	b30b      	cbz	r3, 800334c <__sfp+0x68>
 8003308:	6836      	ldr	r6, [r6, #0]
 800330a:	e7f7      	b.n	80032fc <__sfp+0x18>
 800330c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003310:	b9d5      	cbnz	r5, 8003348 <__sfp+0x64>
 8003312:	4b16      	ldr	r3, [pc, #88]	; (800336c <__sfp+0x88>)
 8003314:	60e3      	str	r3, [r4, #12]
 8003316:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800331a:	6665      	str	r5, [r4, #100]	; 0x64
 800331c:	f000 f847 	bl	80033ae <__retarget_lock_init_recursive>
 8003320:	f7ff ff96 	bl	8003250 <__sfp_lock_release>
 8003324:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003328:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800332c:	6025      	str	r5, [r4, #0]
 800332e:	61a5      	str	r5, [r4, #24]
 8003330:	2208      	movs	r2, #8
 8003332:	4629      	mov	r1, r5
 8003334:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003338:	f7ff faa4 	bl	8002884 <memset>
 800333c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003340:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003344:	4620      	mov	r0, r4
 8003346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003348:	3468      	adds	r4, #104	; 0x68
 800334a:	e7d9      	b.n	8003300 <__sfp+0x1c>
 800334c:	2104      	movs	r1, #4
 800334e:	4638      	mov	r0, r7
 8003350:	f7ff ff62 	bl	8003218 <__sfmoreglue>
 8003354:	4604      	mov	r4, r0
 8003356:	6030      	str	r0, [r6, #0]
 8003358:	2800      	cmp	r0, #0
 800335a:	d1d5      	bne.n	8003308 <__sfp+0x24>
 800335c:	f7ff ff78 	bl	8003250 <__sfp_lock_release>
 8003360:	230c      	movs	r3, #12
 8003362:	603b      	str	r3, [r7, #0]
 8003364:	e7ee      	b.n	8003344 <__sfp+0x60>
 8003366:	bf00      	nop
 8003368:	08003e08 	.word	0x08003e08
 800336c:	ffff0001 	.word	0xffff0001

08003370 <_fwalk_reent>:
 8003370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003374:	4606      	mov	r6, r0
 8003376:	4688      	mov	r8, r1
 8003378:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800337c:	2700      	movs	r7, #0
 800337e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003382:	f1b9 0901 	subs.w	r9, r9, #1
 8003386:	d505      	bpl.n	8003394 <_fwalk_reent+0x24>
 8003388:	6824      	ldr	r4, [r4, #0]
 800338a:	2c00      	cmp	r4, #0
 800338c:	d1f7      	bne.n	800337e <_fwalk_reent+0xe>
 800338e:	4638      	mov	r0, r7
 8003390:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003394:	89ab      	ldrh	r3, [r5, #12]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d907      	bls.n	80033aa <_fwalk_reent+0x3a>
 800339a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800339e:	3301      	adds	r3, #1
 80033a0:	d003      	beq.n	80033aa <_fwalk_reent+0x3a>
 80033a2:	4629      	mov	r1, r5
 80033a4:	4630      	mov	r0, r6
 80033a6:	47c0      	blx	r8
 80033a8:	4307      	orrs	r7, r0
 80033aa:	3568      	adds	r5, #104	; 0x68
 80033ac:	e7e9      	b.n	8003382 <_fwalk_reent+0x12>

080033ae <__retarget_lock_init_recursive>:
 80033ae:	4770      	bx	lr

080033b0 <__retarget_lock_acquire_recursive>:
 80033b0:	4770      	bx	lr

080033b2 <__retarget_lock_release_recursive>:
 80033b2:	4770      	bx	lr

080033b4 <__swhatbuf_r>:
 80033b4:	b570      	push	{r4, r5, r6, lr}
 80033b6:	460e      	mov	r6, r1
 80033b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033bc:	2900      	cmp	r1, #0
 80033be:	b096      	sub	sp, #88	; 0x58
 80033c0:	4614      	mov	r4, r2
 80033c2:	461d      	mov	r5, r3
 80033c4:	da07      	bge.n	80033d6 <__swhatbuf_r+0x22>
 80033c6:	2300      	movs	r3, #0
 80033c8:	602b      	str	r3, [r5, #0]
 80033ca:	89b3      	ldrh	r3, [r6, #12]
 80033cc:	061a      	lsls	r2, r3, #24
 80033ce:	d410      	bmi.n	80033f2 <__swhatbuf_r+0x3e>
 80033d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033d4:	e00e      	b.n	80033f4 <__swhatbuf_r+0x40>
 80033d6:	466a      	mov	r2, sp
 80033d8:	f000 fb50 	bl	8003a7c <_fstat_r>
 80033dc:	2800      	cmp	r0, #0
 80033de:	dbf2      	blt.n	80033c6 <__swhatbuf_r+0x12>
 80033e0:	9a01      	ldr	r2, [sp, #4]
 80033e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80033e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80033ea:	425a      	negs	r2, r3
 80033ec:	415a      	adcs	r2, r3
 80033ee:	602a      	str	r2, [r5, #0]
 80033f0:	e7ee      	b.n	80033d0 <__swhatbuf_r+0x1c>
 80033f2:	2340      	movs	r3, #64	; 0x40
 80033f4:	2000      	movs	r0, #0
 80033f6:	6023      	str	r3, [r4, #0]
 80033f8:	b016      	add	sp, #88	; 0x58
 80033fa:	bd70      	pop	{r4, r5, r6, pc}

080033fc <__smakebuf_r>:
 80033fc:	898b      	ldrh	r3, [r1, #12]
 80033fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003400:	079d      	lsls	r5, r3, #30
 8003402:	4606      	mov	r6, r0
 8003404:	460c      	mov	r4, r1
 8003406:	d507      	bpl.n	8003418 <__smakebuf_r+0x1c>
 8003408:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800340c:	6023      	str	r3, [r4, #0]
 800340e:	6123      	str	r3, [r4, #16]
 8003410:	2301      	movs	r3, #1
 8003412:	6163      	str	r3, [r4, #20]
 8003414:	b002      	add	sp, #8
 8003416:	bd70      	pop	{r4, r5, r6, pc}
 8003418:	ab01      	add	r3, sp, #4
 800341a:	466a      	mov	r2, sp
 800341c:	f7ff ffca 	bl	80033b4 <__swhatbuf_r>
 8003420:	9900      	ldr	r1, [sp, #0]
 8003422:	4605      	mov	r5, r0
 8003424:	4630      	mov	r0, r6
 8003426:	f000 f893 	bl	8003550 <_malloc_r>
 800342a:	b948      	cbnz	r0, 8003440 <__smakebuf_r+0x44>
 800342c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003430:	059a      	lsls	r2, r3, #22
 8003432:	d4ef      	bmi.n	8003414 <__smakebuf_r+0x18>
 8003434:	f023 0303 	bic.w	r3, r3, #3
 8003438:	f043 0302 	orr.w	r3, r3, #2
 800343c:	81a3      	strh	r3, [r4, #12]
 800343e:	e7e3      	b.n	8003408 <__smakebuf_r+0xc>
 8003440:	4b0d      	ldr	r3, [pc, #52]	; (8003478 <__smakebuf_r+0x7c>)
 8003442:	62b3      	str	r3, [r6, #40]	; 0x28
 8003444:	89a3      	ldrh	r3, [r4, #12]
 8003446:	6020      	str	r0, [r4, #0]
 8003448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800344c:	81a3      	strh	r3, [r4, #12]
 800344e:	9b00      	ldr	r3, [sp, #0]
 8003450:	6163      	str	r3, [r4, #20]
 8003452:	9b01      	ldr	r3, [sp, #4]
 8003454:	6120      	str	r0, [r4, #16]
 8003456:	b15b      	cbz	r3, 8003470 <__smakebuf_r+0x74>
 8003458:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800345c:	4630      	mov	r0, r6
 800345e:	f000 fb1f 	bl	8003aa0 <_isatty_r>
 8003462:	b128      	cbz	r0, 8003470 <__smakebuf_r+0x74>
 8003464:	89a3      	ldrh	r3, [r4, #12]
 8003466:	f023 0303 	bic.w	r3, r3, #3
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	81a3      	strh	r3, [r4, #12]
 8003470:	89a0      	ldrh	r0, [r4, #12]
 8003472:	4305      	orrs	r5, r0
 8003474:	81a5      	strh	r5, [r4, #12]
 8003476:	e7cd      	b.n	8003414 <__smakebuf_r+0x18>
 8003478:	0800320d 	.word	0x0800320d

0800347c <memmove>:
 800347c:	4288      	cmp	r0, r1
 800347e:	b510      	push	{r4, lr}
 8003480:	eb01 0402 	add.w	r4, r1, r2
 8003484:	d902      	bls.n	800348c <memmove+0x10>
 8003486:	4284      	cmp	r4, r0
 8003488:	4623      	mov	r3, r4
 800348a:	d807      	bhi.n	800349c <memmove+0x20>
 800348c:	1e43      	subs	r3, r0, #1
 800348e:	42a1      	cmp	r1, r4
 8003490:	d008      	beq.n	80034a4 <memmove+0x28>
 8003492:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003496:	f803 2f01 	strb.w	r2, [r3, #1]!
 800349a:	e7f8      	b.n	800348e <memmove+0x12>
 800349c:	4402      	add	r2, r0
 800349e:	4601      	mov	r1, r0
 80034a0:	428a      	cmp	r2, r1
 80034a2:	d100      	bne.n	80034a6 <memmove+0x2a>
 80034a4:	bd10      	pop	{r4, pc}
 80034a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80034aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80034ae:	e7f7      	b.n	80034a0 <memmove+0x24>

080034b0 <_free_r>:
 80034b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80034b2:	2900      	cmp	r1, #0
 80034b4:	d048      	beq.n	8003548 <_free_r+0x98>
 80034b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034ba:	9001      	str	r0, [sp, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f1a1 0404 	sub.w	r4, r1, #4
 80034c2:	bfb8      	it	lt
 80034c4:	18e4      	addlt	r4, r4, r3
 80034c6:	f000 fb0d 	bl	8003ae4 <__malloc_lock>
 80034ca:	4a20      	ldr	r2, [pc, #128]	; (800354c <_free_r+0x9c>)
 80034cc:	9801      	ldr	r0, [sp, #4]
 80034ce:	6813      	ldr	r3, [r2, #0]
 80034d0:	4615      	mov	r5, r2
 80034d2:	b933      	cbnz	r3, 80034e2 <_free_r+0x32>
 80034d4:	6063      	str	r3, [r4, #4]
 80034d6:	6014      	str	r4, [r2, #0]
 80034d8:	b003      	add	sp, #12
 80034da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80034de:	f000 bb07 	b.w	8003af0 <__malloc_unlock>
 80034e2:	42a3      	cmp	r3, r4
 80034e4:	d90b      	bls.n	80034fe <_free_r+0x4e>
 80034e6:	6821      	ldr	r1, [r4, #0]
 80034e8:	1862      	adds	r2, r4, r1
 80034ea:	4293      	cmp	r3, r2
 80034ec:	bf04      	itt	eq
 80034ee:	681a      	ldreq	r2, [r3, #0]
 80034f0:	685b      	ldreq	r3, [r3, #4]
 80034f2:	6063      	str	r3, [r4, #4]
 80034f4:	bf04      	itt	eq
 80034f6:	1852      	addeq	r2, r2, r1
 80034f8:	6022      	streq	r2, [r4, #0]
 80034fa:	602c      	str	r4, [r5, #0]
 80034fc:	e7ec      	b.n	80034d8 <_free_r+0x28>
 80034fe:	461a      	mov	r2, r3
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	b10b      	cbz	r3, 8003508 <_free_r+0x58>
 8003504:	42a3      	cmp	r3, r4
 8003506:	d9fa      	bls.n	80034fe <_free_r+0x4e>
 8003508:	6811      	ldr	r1, [r2, #0]
 800350a:	1855      	adds	r5, r2, r1
 800350c:	42a5      	cmp	r5, r4
 800350e:	d10b      	bne.n	8003528 <_free_r+0x78>
 8003510:	6824      	ldr	r4, [r4, #0]
 8003512:	4421      	add	r1, r4
 8003514:	1854      	adds	r4, r2, r1
 8003516:	42a3      	cmp	r3, r4
 8003518:	6011      	str	r1, [r2, #0]
 800351a:	d1dd      	bne.n	80034d8 <_free_r+0x28>
 800351c:	681c      	ldr	r4, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	6053      	str	r3, [r2, #4]
 8003522:	4421      	add	r1, r4
 8003524:	6011      	str	r1, [r2, #0]
 8003526:	e7d7      	b.n	80034d8 <_free_r+0x28>
 8003528:	d902      	bls.n	8003530 <_free_r+0x80>
 800352a:	230c      	movs	r3, #12
 800352c:	6003      	str	r3, [r0, #0]
 800352e:	e7d3      	b.n	80034d8 <_free_r+0x28>
 8003530:	6825      	ldr	r5, [r4, #0]
 8003532:	1961      	adds	r1, r4, r5
 8003534:	428b      	cmp	r3, r1
 8003536:	bf04      	itt	eq
 8003538:	6819      	ldreq	r1, [r3, #0]
 800353a:	685b      	ldreq	r3, [r3, #4]
 800353c:	6063      	str	r3, [r4, #4]
 800353e:	bf04      	itt	eq
 8003540:	1949      	addeq	r1, r1, r5
 8003542:	6021      	streq	r1, [r4, #0]
 8003544:	6054      	str	r4, [r2, #4]
 8003546:	e7c7      	b.n	80034d8 <_free_r+0x28>
 8003548:	b003      	add	sp, #12
 800354a:	bd30      	pop	{r4, r5, pc}
 800354c:	20000318 	.word	0x20000318

08003550 <_malloc_r>:
 8003550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003552:	1ccd      	adds	r5, r1, #3
 8003554:	f025 0503 	bic.w	r5, r5, #3
 8003558:	3508      	adds	r5, #8
 800355a:	2d0c      	cmp	r5, #12
 800355c:	bf38      	it	cc
 800355e:	250c      	movcc	r5, #12
 8003560:	2d00      	cmp	r5, #0
 8003562:	4606      	mov	r6, r0
 8003564:	db01      	blt.n	800356a <_malloc_r+0x1a>
 8003566:	42a9      	cmp	r1, r5
 8003568:	d903      	bls.n	8003572 <_malloc_r+0x22>
 800356a:	230c      	movs	r3, #12
 800356c:	6033      	str	r3, [r6, #0]
 800356e:	2000      	movs	r0, #0
 8003570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003572:	f000 fab7 	bl	8003ae4 <__malloc_lock>
 8003576:	4921      	ldr	r1, [pc, #132]	; (80035fc <_malloc_r+0xac>)
 8003578:	680a      	ldr	r2, [r1, #0]
 800357a:	4614      	mov	r4, r2
 800357c:	b99c      	cbnz	r4, 80035a6 <_malloc_r+0x56>
 800357e:	4f20      	ldr	r7, [pc, #128]	; (8003600 <_malloc_r+0xb0>)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	b923      	cbnz	r3, 800358e <_malloc_r+0x3e>
 8003584:	4621      	mov	r1, r4
 8003586:	4630      	mov	r0, r6
 8003588:	f000 f9be 	bl	8003908 <_sbrk_r>
 800358c:	6038      	str	r0, [r7, #0]
 800358e:	4629      	mov	r1, r5
 8003590:	4630      	mov	r0, r6
 8003592:	f000 f9b9 	bl	8003908 <_sbrk_r>
 8003596:	1c43      	adds	r3, r0, #1
 8003598:	d123      	bne.n	80035e2 <_malloc_r+0x92>
 800359a:	230c      	movs	r3, #12
 800359c:	6033      	str	r3, [r6, #0]
 800359e:	4630      	mov	r0, r6
 80035a0:	f000 faa6 	bl	8003af0 <__malloc_unlock>
 80035a4:	e7e3      	b.n	800356e <_malloc_r+0x1e>
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	1b5b      	subs	r3, r3, r5
 80035aa:	d417      	bmi.n	80035dc <_malloc_r+0x8c>
 80035ac:	2b0b      	cmp	r3, #11
 80035ae:	d903      	bls.n	80035b8 <_malloc_r+0x68>
 80035b0:	6023      	str	r3, [r4, #0]
 80035b2:	441c      	add	r4, r3
 80035b4:	6025      	str	r5, [r4, #0]
 80035b6:	e004      	b.n	80035c2 <_malloc_r+0x72>
 80035b8:	6863      	ldr	r3, [r4, #4]
 80035ba:	42a2      	cmp	r2, r4
 80035bc:	bf0c      	ite	eq
 80035be:	600b      	streq	r3, [r1, #0]
 80035c0:	6053      	strne	r3, [r2, #4]
 80035c2:	4630      	mov	r0, r6
 80035c4:	f000 fa94 	bl	8003af0 <__malloc_unlock>
 80035c8:	f104 000b 	add.w	r0, r4, #11
 80035cc:	1d23      	adds	r3, r4, #4
 80035ce:	f020 0007 	bic.w	r0, r0, #7
 80035d2:	1ac2      	subs	r2, r0, r3
 80035d4:	d0cc      	beq.n	8003570 <_malloc_r+0x20>
 80035d6:	1a1b      	subs	r3, r3, r0
 80035d8:	50a3      	str	r3, [r4, r2]
 80035da:	e7c9      	b.n	8003570 <_malloc_r+0x20>
 80035dc:	4622      	mov	r2, r4
 80035de:	6864      	ldr	r4, [r4, #4]
 80035e0:	e7cc      	b.n	800357c <_malloc_r+0x2c>
 80035e2:	1cc4      	adds	r4, r0, #3
 80035e4:	f024 0403 	bic.w	r4, r4, #3
 80035e8:	42a0      	cmp	r0, r4
 80035ea:	d0e3      	beq.n	80035b4 <_malloc_r+0x64>
 80035ec:	1a21      	subs	r1, r4, r0
 80035ee:	4630      	mov	r0, r6
 80035f0:	f000 f98a 	bl	8003908 <_sbrk_r>
 80035f4:	3001      	adds	r0, #1
 80035f6:	d1dd      	bne.n	80035b4 <_malloc_r+0x64>
 80035f8:	e7cf      	b.n	800359a <_malloc_r+0x4a>
 80035fa:	bf00      	nop
 80035fc:	20000318 	.word	0x20000318
 8003600:	2000031c 	.word	0x2000031c

08003604 <_realloc_r>:
 8003604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003606:	4607      	mov	r7, r0
 8003608:	4614      	mov	r4, r2
 800360a:	460e      	mov	r6, r1
 800360c:	b921      	cbnz	r1, 8003618 <_realloc_r+0x14>
 800360e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003612:	4611      	mov	r1, r2
 8003614:	f7ff bf9c 	b.w	8003550 <_malloc_r>
 8003618:	b922      	cbnz	r2, 8003624 <_realloc_r+0x20>
 800361a:	f7ff ff49 	bl	80034b0 <_free_r>
 800361e:	4625      	mov	r5, r4
 8003620:	4628      	mov	r0, r5
 8003622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003624:	f000 fa6a 	bl	8003afc <_malloc_usable_size_r>
 8003628:	42a0      	cmp	r0, r4
 800362a:	d20f      	bcs.n	800364c <_realloc_r+0x48>
 800362c:	4621      	mov	r1, r4
 800362e:	4638      	mov	r0, r7
 8003630:	f7ff ff8e 	bl	8003550 <_malloc_r>
 8003634:	4605      	mov	r5, r0
 8003636:	2800      	cmp	r0, #0
 8003638:	d0f2      	beq.n	8003620 <_realloc_r+0x1c>
 800363a:	4631      	mov	r1, r6
 800363c:	4622      	mov	r2, r4
 800363e:	f7ff f913 	bl	8002868 <memcpy>
 8003642:	4631      	mov	r1, r6
 8003644:	4638      	mov	r0, r7
 8003646:	f7ff ff33 	bl	80034b0 <_free_r>
 800364a:	e7e9      	b.n	8003620 <_realloc_r+0x1c>
 800364c:	4635      	mov	r5, r6
 800364e:	e7e7      	b.n	8003620 <_realloc_r+0x1c>

08003650 <__ssputs_r>:
 8003650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003654:	688e      	ldr	r6, [r1, #8]
 8003656:	429e      	cmp	r6, r3
 8003658:	4682      	mov	sl, r0
 800365a:	460c      	mov	r4, r1
 800365c:	4690      	mov	r8, r2
 800365e:	461f      	mov	r7, r3
 8003660:	d838      	bhi.n	80036d4 <__ssputs_r+0x84>
 8003662:	898a      	ldrh	r2, [r1, #12]
 8003664:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003668:	d032      	beq.n	80036d0 <__ssputs_r+0x80>
 800366a:	6825      	ldr	r5, [r4, #0]
 800366c:	6909      	ldr	r1, [r1, #16]
 800366e:	eba5 0901 	sub.w	r9, r5, r1
 8003672:	6965      	ldr	r5, [r4, #20]
 8003674:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003678:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800367c:	3301      	adds	r3, #1
 800367e:	444b      	add	r3, r9
 8003680:	106d      	asrs	r5, r5, #1
 8003682:	429d      	cmp	r5, r3
 8003684:	bf38      	it	cc
 8003686:	461d      	movcc	r5, r3
 8003688:	0553      	lsls	r3, r2, #21
 800368a:	d531      	bpl.n	80036f0 <__ssputs_r+0xa0>
 800368c:	4629      	mov	r1, r5
 800368e:	f7ff ff5f 	bl	8003550 <_malloc_r>
 8003692:	4606      	mov	r6, r0
 8003694:	b950      	cbnz	r0, 80036ac <__ssputs_r+0x5c>
 8003696:	230c      	movs	r3, #12
 8003698:	f8ca 3000 	str.w	r3, [sl]
 800369c:	89a3      	ldrh	r3, [r4, #12]
 800369e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036a2:	81a3      	strh	r3, [r4, #12]
 80036a4:	f04f 30ff 	mov.w	r0, #4294967295
 80036a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036ac:	6921      	ldr	r1, [r4, #16]
 80036ae:	464a      	mov	r2, r9
 80036b0:	f7ff f8da 	bl	8002868 <memcpy>
 80036b4:	89a3      	ldrh	r3, [r4, #12]
 80036b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80036ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036be:	81a3      	strh	r3, [r4, #12]
 80036c0:	6126      	str	r6, [r4, #16]
 80036c2:	6165      	str	r5, [r4, #20]
 80036c4:	444e      	add	r6, r9
 80036c6:	eba5 0509 	sub.w	r5, r5, r9
 80036ca:	6026      	str	r6, [r4, #0]
 80036cc:	60a5      	str	r5, [r4, #8]
 80036ce:	463e      	mov	r6, r7
 80036d0:	42be      	cmp	r6, r7
 80036d2:	d900      	bls.n	80036d6 <__ssputs_r+0x86>
 80036d4:	463e      	mov	r6, r7
 80036d6:	4632      	mov	r2, r6
 80036d8:	6820      	ldr	r0, [r4, #0]
 80036da:	4641      	mov	r1, r8
 80036dc:	f7ff fece 	bl	800347c <memmove>
 80036e0:	68a3      	ldr	r3, [r4, #8]
 80036e2:	6822      	ldr	r2, [r4, #0]
 80036e4:	1b9b      	subs	r3, r3, r6
 80036e6:	4432      	add	r2, r6
 80036e8:	60a3      	str	r3, [r4, #8]
 80036ea:	6022      	str	r2, [r4, #0]
 80036ec:	2000      	movs	r0, #0
 80036ee:	e7db      	b.n	80036a8 <__ssputs_r+0x58>
 80036f0:	462a      	mov	r2, r5
 80036f2:	f7ff ff87 	bl	8003604 <_realloc_r>
 80036f6:	4606      	mov	r6, r0
 80036f8:	2800      	cmp	r0, #0
 80036fa:	d1e1      	bne.n	80036c0 <__ssputs_r+0x70>
 80036fc:	6921      	ldr	r1, [r4, #16]
 80036fe:	4650      	mov	r0, sl
 8003700:	f7ff fed6 	bl	80034b0 <_free_r>
 8003704:	e7c7      	b.n	8003696 <__ssputs_r+0x46>
	...

08003708 <_svfiprintf_r>:
 8003708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800370c:	4698      	mov	r8, r3
 800370e:	898b      	ldrh	r3, [r1, #12]
 8003710:	061b      	lsls	r3, r3, #24
 8003712:	b09d      	sub	sp, #116	; 0x74
 8003714:	4607      	mov	r7, r0
 8003716:	460d      	mov	r5, r1
 8003718:	4614      	mov	r4, r2
 800371a:	d50e      	bpl.n	800373a <_svfiprintf_r+0x32>
 800371c:	690b      	ldr	r3, [r1, #16]
 800371e:	b963      	cbnz	r3, 800373a <_svfiprintf_r+0x32>
 8003720:	2140      	movs	r1, #64	; 0x40
 8003722:	f7ff ff15 	bl	8003550 <_malloc_r>
 8003726:	6028      	str	r0, [r5, #0]
 8003728:	6128      	str	r0, [r5, #16]
 800372a:	b920      	cbnz	r0, 8003736 <_svfiprintf_r+0x2e>
 800372c:	230c      	movs	r3, #12
 800372e:	603b      	str	r3, [r7, #0]
 8003730:	f04f 30ff 	mov.w	r0, #4294967295
 8003734:	e0d1      	b.n	80038da <_svfiprintf_r+0x1d2>
 8003736:	2340      	movs	r3, #64	; 0x40
 8003738:	616b      	str	r3, [r5, #20]
 800373a:	2300      	movs	r3, #0
 800373c:	9309      	str	r3, [sp, #36]	; 0x24
 800373e:	2320      	movs	r3, #32
 8003740:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003744:	f8cd 800c 	str.w	r8, [sp, #12]
 8003748:	2330      	movs	r3, #48	; 0x30
 800374a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80038f4 <_svfiprintf_r+0x1ec>
 800374e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003752:	f04f 0901 	mov.w	r9, #1
 8003756:	4623      	mov	r3, r4
 8003758:	469a      	mov	sl, r3
 800375a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800375e:	b10a      	cbz	r2, 8003764 <_svfiprintf_r+0x5c>
 8003760:	2a25      	cmp	r2, #37	; 0x25
 8003762:	d1f9      	bne.n	8003758 <_svfiprintf_r+0x50>
 8003764:	ebba 0b04 	subs.w	fp, sl, r4
 8003768:	d00b      	beq.n	8003782 <_svfiprintf_r+0x7a>
 800376a:	465b      	mov	r3, fp
 800376c:	4622      	mov	r2, r4
 800376e:	4629      	mov	r1, r5
 8003770:	4638      	mov	r0, r7
 8003772:	f7ff ff6d 	bl	8003650 <__ssputs_r>
 8003776:	3001      	adds	r0, #1
 8003778:	f000 80aa 	beq.w	80038d0 <_svfiprintf_r+0x1c8>
 800377c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800377e:	445a      	add	r2, fp
 8003780:	9209      	str	r2, [sp, #36]	; 0x24
 8003782:	f89a 3000 	ldrb.w	r3, [sl]
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 80a2 	beq.w	80038d0 <_svfiprintf_r+0x1c8>
 800378c:	2300      	movs	r3, #0
 800378e:	f04f 32ff 	mov.w	r2, #4294967295
 8003792:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003796:	f10a 0a01 	add.w	sl, sl, #1
 800379a:	9304      	str	r3, [sp, #16]
 800379c:	9307      	str	r3, [sp, #28]
 800379e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037a2:	931a      	str	r3, [sp, #104]	; 0x68
 80037a4:	4654      	mov	r4, sl
 80037a6:	2205      	movs	r2, #5
 80037a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037ac:	4851      	ldr	r0, [pc, #324]	; (80038f4 <_svfiprintf_r+0x1ec>)
 80037ae:	f7fc fd17 	bl	80001e0 <memchr>
 80037b2:	9a04      	ldr	r2, [sp, #16]
 80037b4:	b9d8      	cbnz	r0, 80037ee <_svfiprintf_r+0xe6>
 80037b6:	06d0      	lsls	r0, r2, #27
 80037b8:	bf44      	itt	mi
 80037ba:	2320      	movmi	r3, #32
 80037bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037c0:	0711      	lsls	r1, r2, #28
 80037c2:	bf44      	itt	mi
 80037c4:	232b      	movmi	r3, #43	; 0x2b
 80037c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037ca:	f89a 3000 	ldrb.w	r3, [sl]
 80037ce:	2b2a      	cmp	r3, #42	; 0x2a
 80037d0:	d015      	beq.n	80037fe <_svfiprintf_r+0xf6>
 80037d2:	9a07      	ldr	r2, [sp, #28]
 80037d4:	4654      	mov	r4, sl
 80037d6:	2000      	movs	r0, #0
 80037d8:	f04f 0c0a 	mov.w	ip, #10
 80037dc:	4621      	mov	r1, r4
 80037de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037e2:	3b30      	subs	r3, #48	; 0x30
 80037e4:	2b09      	cmp	r3, #9
 80037e6:	d94e      	bls.n	8003886 <_svfiprintf_r+0x17e>
 80037e8:	b1b0      	cbz	r0, 8003818 <_svfiprintf_r+0x110>
 80037ea:	9207      	str	r2, [sp, #28]
 80037ec:	e014      	b.n	8003818 <_svfiprintf_r+0x110>
 80037ee:	eba0 0308 	sub.w	r3, r0, r8
 80037f2:	fa09 f303 	lsl.w	r3, r9, r3
 80037f6:	4313      	orrs	r3, r2
 80037f8:	9304      	str	r3, [sp, #16]
 80037fa:	46a2      	mov	sl, r4
 80037fc:	e7d2      	b.n	80037a4 <_svfiprintf_r+0x9c>
 80037fe:	9b03      	ldr	r3, [sp, #12]
 8003800:	1d19      	adds	r1, r3, #4
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	9103      	str	r1, [sp, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	bfbb      	ittet	lt
 800380a:	425b      	neglt	r3, r3
 800380c:	f042 0202 	orrlt.w	r2, r2, #2
 8003810:	9307      	strge	r3, [sp, #28]
 8003812:	9307      	strlt	r3, [sp, #28]
 8003814:	bfb8      	it	lt
 8003816:	9204      	strlt	r2, [sp, #16]
 8003818:	7823      	ldrb	r3, [r4, #0]
 800381a:	2b2e      	cmp	r3, #46	; 0x2e
 800381c:	d10c      	bne.n	8003838 <_svfiprintf_r+0x130>
 800381e:	7863      	ldrb	r3, [r4, #1]
 8003820:	2b2a      	cmp	r3, #42	; 0x2a
 8003822:	d135      	bne.n	8003890 <_svfiprintf_r+0x188>
 8003824:	9b03      	ldr	r3, [sp, #12]
 8003826:	1d1a      	adds	r2, r3, #4
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	9203      	str	r2, [sp, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	bfb8      	it	lt
 8003830:	f04f 33ff 	movlt.w	r3, #4294967295
 8003834:	3402      	adds	r4, #2
 8003836:	9305      	str	r3, [sp, #20]
 8003838:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003904 <_svfiprintf_r+0x1fc>
 800383c:	7821      	ldrb	r1, [r4, #0]
 800383e:	2203      	movs	r2, #3
 8003840:	4650      	mov	r0, sl
 8003842:	f7fc fccd 	bl	80001e0 <memchr>
 8003846:	b140      	cbz	r0, 800385a <_svfiprintf_r+0x152>
 8003848:	2340      	movs	r3, #64	; 0x40
 800384a:	eba0 000a 	sub.w	r0, r0, sl
 800384e:	fa03 f000 	lsl.w	r0, r3, r0
 8003852:	9b04      	ldr	r3, [sp, #16]
 8003854:	4303      	orrs	r3, r0
 8003856:	3401      	adds	r4, #1
 8003858:	9304      	str	r3, [sp, #16]
 800385a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800385e:	4826      	ldr	r0, [pc, #152]	; (80038f8 <_svfiprintf_r+0x1f0>)
 8003860:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003864:	2206      	movs	r2, #6
 8003866:	f7fc fcbb 	bl	80001e0 <memchr>
 800386a:	2800      	cmp	r0, #0
 800386c:	d038      	beq.n	80038e0 <_svfiprintf_r+0x1d8>
 800386e:	4b23      	ldr	r3, [pc, #140]	; (80038fc <_svfiprintf_r+0x1f4>)
 8003870:	bb1b      	cbnz	r3, 80038ba <_svfiprintf_r+0x1b2>
 8003872:	9b03      	ldr	r3, [sp, #12]
 8003874:	3307      	adds	r3, #7
 8003876:	f023 0307 	bic.w	r3, r3, #7
 800387a:	3308      	adds	r3, #8
 800387c:	9303      	str	r3, [sp, #12]
 800387e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003880:	4433      	add	r3, r6
 8003882:	9309      	str	r3, [sp, #36]	; 0x24
 8003884:	e767      	b.n	8003756 <_svfiprintf_r+0x4e>
 8003886:	fb0c 3202 	mla	r2, ip, r2, r3
 800388a:	460c      	mov	r4, r1
 800388c:	2001      	movs	r0, #1
 800388e:	e7a5      	b.n	80037dc <_svfiprintf_r+0xd4>
 8003890:	2300      	movs	r3, #0
 8003892:	3401      	adds	r4, #1
 8003894:	9305      	str	r3, [sp, #20]
 8003896:	4619      	mov	r1, r3
 8003898:	f04f 0c0a 	mov.w	ip, #10
 800389c:	4620      	mov	r0, r4
 800389e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038a2:	3a30      	subs	r2, #48	; 0x30
 80038a4:	2a09      	cmp	r2, #9
 80038a6:	d903      	bls.n	80038b0 <_svfiprintf_r+0x1a8>
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d0c5      	beq.n	8003838 <_svfiprintf_r+0x130>
 80038ac:	9105      	str	r1, [sp, #20]
 80038ae:	e7c3      	b.n	8003838 <_svfiprintf_r+0x130>
 80038b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80038b4:	4604      	mov	r4, r0
 80038b6:	2301      	movs	r3, #1
 80038b8:	e7f0      	b.n	800389c <_svfiprintf_r+0x194>
 80038ba:	ab03      	add	r3, sp, #12
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	462a      	mov	r2, r5
 80038c0:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <_svfiprintf_r+0x1f8>)
 80038c2:	a904      	add	r1, sp, #16
 80038c4:	4638      	mov	r0, r7
 80038c6:	f3af 8000 	nop.w
 80038ca:	1c42      	adds	r2, r0, #1
 80038cc:	4606      	mov	r6, r0
 80038ce:	d1d6      	bne.n	800387e <_svfiprintf_r+0x176>
 80038d0:	89ab      	ldrh	r3, [r5, #12]
 80038d2:	065b      	lsls	r3, r3, #25
 80038d4:	f53f af2c 	bmi.w	8003730 <_svfiprintf_r+0x28>
 80038d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038da:	b01d      	add	sp, #116	; 0x74
 80038dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038e0:	ab03      	add	r3, sp, #12
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	462a      	mov	r2, r5
 80038e6:	4b06      	ldr	r3, [pc, #24]	; (8003900 <_svfiprintf_r+0x1f8>)
 80038e8:	a904      	add	r1, sp, #16
 80038ea:	4638      	mov	r0, r7
 80038ec:	f7ff f99a 	bl	8002c24 <_printf_i>
 80038f0:	e7eb      	b.n	80038ca <_svfiprintf_r+0x1c2>
 80038f2:	bf00      	nop
 80038f4:	08003e0c 	.word	0x08003e0c
 80038f8:	08003e16 	.word	0x08003e16
 80038fc:	00000000 	.word	0x00000000
 8003900:	08003651 	.word	0x08003651
 8003904:	08003e12 	.word	0x08003e12

08003908 <_sbrk_r>:
 8003908:	b538      	push	{r3, r4, r5, lr}
 800390a:	4d06      	ldr	r5, [pc, #24]	; (8003924 <_sbrk_r+0x1c>)
 800390c:	2300      	movs	r3, #0
 800390e:	4604      	mov	r4, r0
 8003910:	4608      	mov	r0, r1
 8003912:	602b      	str	r3, [r5, #0]
 8003914:	f7fd f9ca 	bl	8000cac <_sbrk>
 8003918:	1c43      	adds	r3, r0, #1
 800391a:	d102      	bne.n	8003922 <_sbrk_r+0x1a>
 800391c:	682b      	ldr	r3, [r5, #0]
 800391e:	b103      	cbz	r3, 8003922 <_sbrk_r+0x1a>
 8003920:	6023      	str	r3, [r4, #0]
 8003922:	bd38      	pop	{r3, r4, r5, pc}
 8003924:	200003c4 	.word	0x200003c4

08003928 <_raise_r>:
 8003928:	291f      	cmp	r1, #31
 800392a:	b538      	push	{r3, r4, r5, lr}
 800392c:	4604      	mov	r4, r0
 800392e:	460d      	mov	r5, r1
 8003930:	d904      	bls.n	800393c <_raise_r+0x14>
 8003932:	2316      	movs	r3, #22
 8003934:	6003      	str	r3, [r0, #0]
 8003936:	f04f 30ff 	mov.w	r0, #4294967295
 800393a:	bd38      	pop	{r3, r4, r5, pc}
 800393c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800393e:	b112      	cbz	r2, 8003946 <_raise_r+0x1e>
 8003940:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003944:	b94b      	cbnz	r3, 800395a <_raise_r+0x32>
 8003946:	4620      	mov	r0, r4
 8003948:	f000 f830 	bl	80039ac <_getpid_r>
 800394c:	462a      	mov	r2, r5
 800394e:	4601      	mov	r1, r0
 8003950:	4620      	mov	r0, r4
 8003952:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003956:	f000 b817 	b.w	8003988 <_kill_r>
 800395a:	2b01      	cmp	r3, #1
 800395c:	d00a      	beq.n	8003974 <_raise_r+0x4c>
 800395e:	1c59      	adds	r1, r3, #1
 8003960:	d103      	bne.n	800396a <_raise_r+0x42>
 8003962:	2316      	movs	r3, #22
 8003964:	6003      	str	r3, [r0, #0]
 8003966:	2001      	movs	r0, #1
 8003968:	e7e7      	b.n	800393a <_raise_r+0x12>
 800396a:	2400      	movs	r4, #0
 800396c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003970:	4628      	mov	r0, r5
 8003972:	4798      	blx	r3
 8003974:	2000      	movs	r0, #0
 8003976:	e7e0      	b.n	800393a <_raise_r+0x12>

08003978 <raise>:
 8003978:	4b02      	ldr	r3, [pc, #8]	; (8003984 <raise+0xc>)
 800397a:	4601      	mov	r1, r0
 800397c:	6818      	ldr	r0, [r3, #0]
 800397e:	f7ff bfd3 	b.w	8003928 <_raise_r>
 8003982:	bf00      	nop
 8003984:	2000008c 	.word	0x2000008c

08003988 <_kill_r>:
 8003988:	b538      	push	{r3, r4, r5, lr}
 800398a:	4d07      	ldr	r5, [pc, #28]	; (80039a8 <_kill_r+0x20>)
 800398c:	2300      	movs	r3, #0
 800398e:	4604      	mov	r4, r0
 8003990:	4608      	mov	r0, r1
 8003992:	4611      	mov	r1, r2
 8003994:	602b      	str	r3, [r5, #0]
 8003996:	f7fd f901 	bl	8000b9c <_kill>
 800399a:	1c43      	adds	r3, r0, #1
 800399c:	d102      	bne.n	80039a4 <_kill_r+0x1c>
 800399e:	682b      	ldr	r3, [r5, #0]
 80039a0:	b103      	cbz	r3, 80039a4 <_kill_r+0x1c>
 80039a2:	6023      	str	r3, [r4, #0]
 80039a4:	bd38      	pop	{r3, r4, r5, pc}
 80039a6:	bf00      	nop
 80039a8:	200003c4 	.word	0x200003c4

080039ac <_getpid_r>:
 80039ac:	f7fd b8ee 	b.w	8000b8c <_getpid>

080039b0 <__sread>:
 80039b0:	b510      	push	{r4, lr}
 80039b2:	460c      	mov	r4, r1
 80039b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039b8:	f000 f8a8 	bl	8003b0c <_read_r>
 80039bc:	2800      	cmp	r0, #0
 80039be:	bfab      	itete	ge
 80039c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80039c2:	89a3      	ldrhlt	r3, [r4, #12]
 80039c4:	181b      	addge	r3, r3, r0
 80039c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80039ca:	bfac      	ite	ge
 80039cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80039ce:	81a3      	strhlt	r3, [r4, #12]
 80039d0:	bd10      	pop	{r4, pc}

080039d2 <__swrite>:
 80039d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039d6:	461f      	mov	r7, r3
 80039d8:	898b      	ldrh	r3, [r1, #12]
 80039da:	05db      	lsls	r3, r3, #23
 80039dc:	4605      	mov	r5, r0
 80039de:	460c      	mov	r4, r1
 80039e0:	4616      	mov	r6, r2
 80039e2:	d505      	bpl.n	80039f0 <__swrite+0x1e>
 80039e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039e8:	2302      	movs	r3, #2
 80039ea:	2200      	movs	r2, #0
 80039ec:	f000 f868 	bl	8003ac0 <_lseek_r>
 80039f0:	89a3      	ldrh	r3, [r4, #12]
 80039f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039fa:	81a3      	strh	r3, [r4, #12]
 80039fc:	4632      	mov	r2, r6
 80039fe:	463b      	mov	r3, r7
 8003a00:	4628      	mov	r0, r5
 8003a02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a06:	f000 b817 	b.w	8003a38 <_write_r>

08003a0a <__sseek>:
 8003a0a:	b510      	push	{r4, lr}
 8003a0c:	460c      	mov	r4, r1
 8003a0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a12:	f000 f855 	bl	8003ac0 <_lseek_r>
 8003a16:	1c43      	adds	r3, r0, #1
 8003a18:	89a3      	ldrh	r3, [r4, #12]
 8003a1a:	bf15      	itete	ne
 8003a1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a26:	81a3      	strheq	r3, [r4, #12]
 8003a28:	bf18      	it	ne
 8003a2a:	81a3      	strhne	r3, [r4, #12]
 8003a2c:	bd10      	pop	{r4, pc}

08003a2e <__sclose>:
 8003a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a32:	f000 b813 	b.w	8003a5c <_close_r>
	...

08003a38 <_write_r>:
 8003a38:	b538      	push	{r3, r4, r5, lr}
 8003a3a:	4d07      	ldr	r5, [pc, #28]	; (8003a58 <_write_r+0x20>)
 8003a3c:	4604      	mov	r4, r0
 8003a3e:	4608      	mov	r0, r1
 8003a40:	4611      	mov	r1, r2
 8003a42:	2200      	movs	r2, #0
 8003a44:	602a      	str	r2, [r5, #0]
 8003a46:	461a      	mov	r2, r3
 8003a48:	f7fd f8df 	bl	8000c0a <_write>
 8003a4c:	1c43      	adds	r3, r0, #1
 8003a4e:	d102      	bne.n	8003a56 <_write_r+0x1e>
 8003a50:	682b      	ldr	r3, [r5, #0]
 8003a52:	b103      	cbz	r3, 8003a56 <_write_r+0x1e>
 8003a54:	6023      	str	r3, [r4, #0]
 8003a56:	bd38      	pop	{r3, r4, r5, pc}
 8003a58:	200003c4 	.word	0x200003c4

08003a5c <_close_r>:
 8003a5c:	b538      	push	{r3, r4, r5, lr}
 8003a5e:	4d06      	ldr	r5, [pc, #24]	; (8003a78 <_close_r+0x1c>)
 8003a60:	2300      	movs	r3, #0
 8003a62:	4604      	mov	r4, r0
 8003a64:	4608      	mov	r0, r1
 8003a66:	602b      	str	r3, [r5, #0]
 8003a68:	f7fd f8eb 	bl	8000c42 <_close>
 8003a6c:	1c43      	adds	r3, r0, #1
 8003a6e:	d102      	bne.n	8003a76 <_close_r+0x1a>
 8003a70:	682b      	ldr	r3, [r5, #0]
 8003a72:	b103      	cbz	r3, 8003a76 <_close_r+0x1a>
 8003a74:	6023      	str	r3, [r4, #0]
 8003a76:	bd38      	pop	{r3, r4, r5, pc}
 8003a78:	200003c4 	.word	0x200003c4

08003a7c <_fstat_r>:
 8003a7c:	b538      	push	{r3, r4, r5, lr}
 8003a7e:	4d07      	ldr	r5, [pc, #28]	; (8003a9c <_fstat_r+0x20>)
 8003a80:	2300      	movs	r3, #0
 8003a82:	4604      	mov	r4, r0
 8003a84:	4608      	mov	r0, r1
 8003a86:	4611      	mov	r1, r2
 8003a88:	602b      	str	r3, [r5, #0]
 8003a8a:	f7fd f8e6 	bl	8000c5a <_fstat>
 8003a8e:	1c43      	adds	r3, r0, #1
 8003a90:	d102      	bne.n	8003a98 <_fstat_r+0x1c>
 8003a92:	682b      	ldr	r3, [r5, #0]
 8003a94:	b103      	cbz	r3, 8003a98 <_fstat_r+0x1c>
 8003a96:	6023      	str	r3, [r4, #0]
 8003a98:	bd38      	pop	{r3, r4, r5, pc}
 8003a9a:	bf00      	nop
 8003a9c:	200003c4 	.word	0x200003c4

08003aa0 <_isatty_r>:
 8003aa0:	b538      	push	{r3, r4, r5, lr}
 8003aa2:	4d06      	ldr	r5, [pc, #24]	; (8003abc <_isatty_r+0x1c>)
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	4604      	mov	r4, r0
 8003aa8:	4608      	mov	r0, r1
 8003aaa:	602b      	str	r3, [r5, #0]
 8003aac:	f7fd f8e5 	bl	8000c7a <_isatty>
 8003ab0:	1c43      	adds	r3, r0, #1
 8003ab2:	d102      	bne.n	8003aba <_isatty_r+0x1a>
 8003ab4:	682b      	ldr	r3, [r5, #0]
 8003ab6:	b103      	cbz	r3, 8003aba <_isatty_r+0x1a>
 8003ab8:	6023      	str	r3, [r4, #0]
 8003aba:	bd38      	pop	{r3, r4, r5, pc}
 8003abc:	200003c4 	.word	0x200003c4

08003ac0 <_lseek_r>:
 8003ac0:	b538      	push	{r3, r4, r5, lr}
 8003ac2:	4d07      	ldr	r5, [pc, #28]	; (8003ae0 <_lseek_r+0x20>)
 8003ac4:	4604      	mov	r4, r0
 8003ac6:	4608      	mov	r0, r1
 8003ac8:	4611      	mov	r1, r2
 8003aca:	2200      	movs	r2, #0
 8003acc:	602a      	str	r2, [r5, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f7fd f8de 	bl	8000c90 <_lseek>
 8003ad4:	1c43      	adds	r3, r0, #1
 8003ad6:	d102      	bne.n	8003ade <_lseek_r+0x1e>
 8003ad8:	682b      	ldr	r3, [r5, #0]
 8003ada:	b103      	cbz	r3, 8003ade <_lseek_r+0x1e>
 8003adc:	6023      	str	r3, [r4, #0]
 8003ade:	bd38      	pop	{r3, r4, r5, pc}
 8003ae0:	200003c4 	.word	0x200003c4

08003ae4 <__malloc_lock>:
 8003ae4:	4801      	ldr	r0, [pc, #4]	; (8003aec <__malloc_lock+0x8>)
 8003ae6:	f7ff bc63 	b.w	80033b0 <__retarget_lock_acquire_recursive>
 8003aea:	bf00      	nop
 8003aec:	200003bc 	.word	0x200003bc

08003af0 <__malloc_unlock>:
 8003af0:	4801      	ldr	r0, [pc, #4]	; (8003af8 <__malloc_unlock+0x8>)
 8003af2:	f7ff bc5e 	b.w	80033b2 <__retarget_lock_release_recursive>
 8003af6:	bf00      	nop
 8003af8:	200003bc 	.word	0x200003bc

08003afc <_malloc_usable_size_r>:
 8003afc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b00:	1f18      	subs	r0, r3, #4
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	bfbc      	itt	lt
 8003b06:	580b      	ldrlt	r3, [r1, r0]
 8003b08:	18c0      	addlt	r0, r0, r3
 8003b0a:	4770      	bx	lr

08003b0c <_read_r>:
 8003b0c:	b538      	push	{r3, r4, r5, lr}
 8003b0e:	4d07      	ldr	r5, [pc, #28]	; (8003b2c <_read_r+0x20>)
 8003b10:	4604      	mov	r4, r0
 8003b12:	4608      	mov	r0, r1
 8003b14:	4611      	mov	r1, r2
 8003b16:	2200      	movs	r2, #0
 8003b18:	602a      	str	r2, [r5, #0]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	f7fd f858 	bl	8000bd0 <_read>
 8003b20:	1c43      	adds	r3, r0, #1
 8003b22:	d102      	bne.n	8003b2a <_read_r+0x1e>
 8003b24:	682b      	ldr	r3, [r5, #0]
 8003b26:	b103      	cbz	r3, 8003b2a <_read_r+0x1e>
 8003b28:	6023      	str	r3, [r4, #0]
 8003b2a:	bd38      	pop	{r3, r4, r5, pc}
 8003b2c:	200003c4 	.word	0x200003c4

08003b30 <_init>:
 8003b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b32:	bf00      	nop
 8003b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b36:	bc08      	pop	{r3}
 8003b38:	469e      	mov	lr, r3
 8003b3a:	4770      	bx	lr

08003b3c <_fini>:
 8003b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3e:	bf00      	nop
 8003b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b42:	bc08      	pop	{r3}
 8003b44:	469e      	mov	lr, r3
 8003b46:	4770      	bx	lr
